version 1.1;
/* ------------------------------------------------------------------ */
/* This program performs Zero touch provisioning for the ACX platform */
/* It will set up OAM VLAN and Bridge Domain to allow permanent       */
/* management access to the box.  */
/* */
/* Version 1.0 Vasily Mukhin vmukhin@juniper.net */
/* Based on jctyztp script by Jeremy Schulman and Brian Sherwood */
/* */
/* ------------------------------------------------------------------ */
/* ------------------------------------------------------------------ */
/* XML namespaces */
/* ------------------------------------------------------------------ */
/* Juniper */
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns exsl extension = "http://exslt.org/common";
/* EXSLT */
ns str extension = "http://exslt.org/strings";
/* private namespace for this script */
ns ztp_script = "http://xml.juniper.com/ztp_script/1.0";
import '../import/junos.xsl';
/* ------------------------------------------------------------------ */
/* Script parameters */
/* ------------------------------------------------------------------ */
/* param $server = '10.253.43.29'; */
/* ------------------------------------------------------------------ */
/* Constants */
/* ------------------------------------------------------------------ */
var $APPNAME = 'ztp_script[' _ $junos-context/pid _ ']';
var $SYSLOG = 'user.info';
var $TMPDIR = '/var/tmp';
var $CODEDIR = '/var/tmp';
var $ZTP_GROUP_NAME = "GR-ZTP";
var $ZTP_GROUP_PLATFORM = "GR-ZTP-PLATFORM";
var $ZTP_GROUP_BOX = "GR-ZTP-BOX";
var $ZTP_GROUP_TRANSPORT = "GR-ZTP-TRANSPORT";
var $ZTP_GROUP_SVC = "GR-ZTP-SERVICES";
var $ZTP_CODE_MACRO_NAME = "CODE";
var $ZTP_CONFIG_MACRO_NAME = "CONFIG";
var $ZTP_MACRO_NAME_PREFIX = "ZTP-";
var $ZTP_GROUP_NNI_TAG = "GR-NNI-TAG";
var $BGP_CSR_GROUP = "BGP-AG1-CSR";
var $ZTP_GROUP_STAGE_1 = "GR-ZTP-STAGE-1";
var $ZTP_GROUP_STAGE_2 = "GR-ZTP-STAGE-2";
var $ZTP_GROUP_STAGE_3 = "GR-ZTP-STAGE-3";
var $ZTP_GROUP_STAGE_4 = "GR-ZTP-STAGE-4";
var $ZTP_GROUP_SPACE = "GR-ZTP-SPACE";

var $ZTP_BD_OAM = "BD-ZTP-OAM";
var $ZTP_OAM_VLAN = "OAM_VLAN";
var $ZTP_LOOPBACK = "Lo0";
var $ZTP_LOCKFILE = '/tmp/ztp_script.lock';
var $PATTERN = "system";
/* ------------------------------------------------------------------ */
/* Global variables */
/* ------------------------------------------------------------------ */
var $jnx = jcs:open();
/* ------------------------------------------------------------------ */
/* MAIN */
/* ------------------------------------------------------------------ */
match / {
    if( not( $jnx )) {
        expr jcs:syslog( $SYSLOG, $APPNAME _ ": ERROR: unable to connect to Junos API");
        expr jcs:progress( "ZTP-SCRIPT: ERROR: unable to connect to Junos API");
        expr jcs:output( $APPNAME _ ":ERROR: unable to connect to Junos API");
        terminate;
    }
    var $running = ztp_script:only_once();
    if( $running ) {
        expr jcs:syslog( $SYSLOG, $APPNAME _ ": process already running, backing off" );
        expr jcs:progress( "ZTP-SCRIPT: process already running, backing off" );
        expr jcs:output( $APPNAME _ ": process already running, backing off" );
        terminate;
    }
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": SCRIPT-BEGIN" );
    expr jcs:progress( "ZTP-SCRIPT: SCRIPT-BEGIN" );
    expr jcs:progress( "ZTP-SCRIPT: Getting active ospf neighbors" );
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": Getting active ospf neighbors" );
     /* show ospf neighbors */
    var $get_ospf_neighbor = <get-ospf-neighbor-information> {<detail>;}	
	var $ospf_neighbor := jcs:execute( $jnx, $get_ospf_neighbor );
	mvar $ospf_status = false();
    for-each ($ospf_neighbor/ospf-neighbor/neighbor-address) {
		set $ospf_status = {
			if ( ../ospf-neighbor-state == "Full") {
				expr true();
			}
		}
	}
	if (not ( $ospf_status)) {
		expr jcs:progress( "ZTP-SCRIPT: OSPF not running or no active OSPF neighbors" );
		expr jcs:progress( "ZTP-SCRIPT: Terminating script" );
		var $die = ztp_script:terminate();
	}
	var $platform = ztp_script:get_platform();
	expr jcs:progress( "ZTP-SCRIPT: Platform: " _ $platform  );
	var $host_name = ztp_script:get_host_name();
	expr jcs:progress( "ZTP-SCRIPT: Host Name: " _ $host_name  );
	var $lo0_prefix = ztp_script:get_router_id();
	expr jcs:progress( "ZTP-SCRIPT: Loopback address (router ID): " _ $lo0_prefix  );
	var $lldp_neighbor = ztp_script:get_lldp_neighbors();
	var $ospf_abr = ztp_script:get_ospf_abrs();
    var $get = <get-configuration> {
         <configuration> {
            <groups> {
               <name> $ZTP_GROUP_PLATFORM;
               <apply-macro> {
                  <name> $ZTP_MACRO_NAME_PREFIX _ $platform;
                }
            }
        }
    }
	/* geting variables from apply-macro */
	var $got = jcs:execute( $jnx, $get );
	/* Create configuration with static IP */
	var $options := {
         <commit-options> {
            <log> "Enabling lsp in the access segment"; 
        }
	}
    var $change = {
        <configuration> {
			<protocols> {
				<mpls> {
					call emit-lsp-to-abr($ospf_abr, $lldp_neighbor, $ospf_neighbor, $host_name, $lo0_prefix);
					call emit-nni-interfaces($platform, $got);
				}
				<rsvp> {
					call emit-nni-interfaces($platform, $got);
					<interface> {
						<name> "lo0.0";
					}
				}
				<ldp> {
					<interface> {
						<name> "lo0.0";
					}
				}
				<bgp> {
					<group> {
						<name> $BGP_CSR_GROUP;
						<local-address> $lo0_prefix;
     					for-each ($ospf_abr/ospf-topology-route-table/ospf-route/ospf-route-entry[next-hop-type="IP"]/address-prefix) {
	                    	<neighbor> {
                               <name> ../address-prefix;
		                    }
						}
					}
				}
			}
        }
    }	
    var $results := { call jcs:load-configuration( $action="merge", $commit-options=$options, $configuration=$change, $connection = $jnx ); } 
    if ($results//xnm:warning) {
        for-each ($results//xnm:warning) {
	        expr jcs:progress( "ZTP-SCRIPT: commit warning: " _ message );
        }
    }
	if ($results//xnm:error) {
        for-each ($results//xnm:error) {
            expr jcs:progress( "ZTP-SCRIPT: commit error: " _ message );
        }
	    expr jcs:progress( "ZTP-SCRIPT: Script failed." );
		var $die = ztp_script:terminate();
    } else {
        expr jcs:progress( "ZTP-SCRIPT: MPLS Egress LSP configured" );
	}
	/*--------------------------------------------------------------*/
	/*  Deactivate configuration for STAGE#3                        */
	/*  Activate   configuration for STAGE#4 if exists              */	
	/*--------------------------------------------------------------*/
	var $options_s3 := {
        <commit-options> {
            <log> "Enabling next ZTP Stage"; 
        }
	}
    var $change_s3 = {
        <configuration> {
            <apply-groups delete = "delete"> $ZTP_GROUP_STAGE_3;
			if ( ztp_script:ztp_grp_exists($ZTP_GROUP_STAGE_4) )  {
				<apply-groups> $ZTP_GROUP_STAGE_4;
			}	
        }
    }
    /* Loading configuration */	
    var $results_step_3 := { call jcs:load-configuration( $action="merge", $commit-options=$options_s3, $configuration=$change_s3, $connection = $jnx ); }
    if ($results_step_3//xnm:warning) {
        for-each ($results_step_3//xnm:warning) {
	        expr jcs:progress( "ZTP-SCRIPT: commit warning: " _ message );
        }
    }
	if ($results_step_3//xnm:error) {
        for-each ($results_step_3//xnm:error) {
            expr jcs:progress( "ZTP-SCRIPT: apply-group commit error: " _ message );
        }
	    expr jcs:progress( "ZTP-SCRIPT: Script failed." );
		var $die = ztp_script:terminate();
    } else {
        expr jcs:progress( "ZTP-SCRIPT: ZTP-SCRIPT: ZTP PHASE 3 COMPLITED SUCCESSFULLY" );
	}
	var $die = ztp_script:terminate();		
}

/*--------------------------------------------------------- */
/*   TEMPLATE ADDS BOX SPECIFIC BGP CONFIG                  */
/*----------------------------------------------------------*/
template emit-bgp-neighbor($ospf_abr){
	for-each ($ospf_abr/ospf-topology-route-table/ospf-route/ospf-route-entry[next-hop-type="IP"]/address-prefix) {
		<neighbor> {
            <name> ../address-prefix;
		}
	}	
}
/*--------------------------------------------------------- */
/*   TEMPLATE ADDS INGRESS LSPs to ABRS                     */
/*----------------------------------------------------------*/
template emit-lsp-to-abr($ospf_abr, $lldp_neighbor, $ospf_neighbor, $host_name, $lo0_prefix){
	mvar $neighbor_name = "";
	mvar $nni = "";
	mvar $abr_prefix = "";
	mvar $metric = "";
	mvar $get = "";
	mvar $got = "";
	mvar $old_metric = "";
	mvar $old_primary_path;
    for-each ($ospf_abr/ospf-topology-route-table/ospf-route/ospf-route-entry[next-hop-type="IP"]/address-prefix) {
		set $nni = ../ospf-next-hop/next-hop-name/interface-name;
		set $abr_prefix = ../address-prefix;
		set $metric = ../interface-cost;
		expr jcs:progress( "ZTP-SCRIPT: ABR Prefix: " _ $abr_prefix );
		expr jcs:progress( "ZTP-SCRIPT: Adding LSP via: " _ $nni );
	    expr jcs:progress( "ZTP-SCRIPT: Route metric: " _ $metric );
		set $neighbor_name = {
			if ( $lldp_neighbor/lldp-neighbor-information[lldp-local-port-id=substring-before($nni,".")] ) {
				expr $lldp_neighbor/lldp-neighbor-information[lldp-local-port-id=substring-before($nni,".")]/lldp-remote-system-name;
			} else {
				expr $nni;
			}
		}
		expr jcs:progress( "ZTP-SCRIPT: Adding LSP via neighbor: " _ $neighbor_name );
		expr jcs:progress( "ZTP-SCRIPT: Adding strict path to: " _ $ospf_neighbor/ospf-neighbor[interface-name = $nni]/neighbor-address);
		/* - check alredy configured lsps */
	    set $get = <get-configuration> {
            <configuration> {
               <protocols> {
                    <mpls> ;
                }
            }
        }
    	/* geting variables from apply-macro */
	    set $got = jcs:execute( $jnx, $get );
		if ( $got/protocols/mpls/label-switched-path[name=$host_name _"_to_" _ "ag." _ $abr_prefix]/primary/name) {
			set $old_primary_path = $got/protocols/mpls/label-switched-path[name=$host_name _"_to_" _ "ag." _ $abr_prefix]/primary/name;
			set $old_metric = substring-before(substring-after($old_primary_path,"-["),"]") + 0;
		    if ( ($old_metric)) {
				if ($metric < $old_metric) {
					expr jcs:progress( "ZTP-SCRIPT: A better path to " _ $abr_prefix _ " via " _ $neighbor_name  _ " was found." );
					expr jcs:progress( "ZTP-SCRIPT: The path will be used as new primary path for lsp:" _ $host_name _"_to_" _ "ag." _ $abr_prefix);					
            		<label-switched-path> {
	         		    <name> $host_name _"_to_" _ "ag." _ $abr_prefix;
			            <primary delete="delete"> {
						    <name> $old_primary_path;
						}
						<primary> {
     					    <name> "via-" _ $neighbor_name _ "-[" _ $metric _ "]";
			            }
						<secondary> {
							<name> $old_primary_path;
							<standby>;
						}
		            }
                    <path> {
	    	            <name> "via-" _ $neighbor_name _ "-[" _ $metric _ "]";
		                <path-list> {
		                    <name> $ospf_neighbor/ospf-neighbor[interface-name = $nni]/neighbor-address;
			                <strict>;
			            }
		            }
				} else { /* old metric is better */
			        expr jcs:progress( "ZTP-SCRIPT: Current primary path has better metric. Don't change configuration for lsp:" _ $host_name _"_to_" _ "ag." _ $abr_prefix);
				}
			} else { /* can't get a numeric value for old metric */
	           expr jcs:progress( "ZTP-SCRIPT: Can't get numeric value for old path: " _ old_primary_path  _ ". Skip lsp:" _ $host_name _"_to_" _ "ag." _ $abr_prefix);
			}  
		} else {
       		<label-switched-path> {
			    <name> $host_name _"_to_" _ "ag." _ $abr_prefix;
			    <from> $lo0_prefix;
			    <to> $abr_prefix;
			    <standby>;
			    <fast-reroute>;
			    <primary> {
				    <name> "via-" _ $neighbor_name _ "-[" _ $metric _ "]";
			    }
		    }
            <path> {
	    	    <name> "via-" _ $neighbor_name _ "-[" _ $metric _ "]";
		        <path-list> {
		            <name> $ospf_neighbor/ospf-neighbor[interface-name = $nni]/neighbor-address;
			        <strict>;
			    }
		    }
		}
	}
}
/*--------------------------------------------------------- */
/*   TEMPLATE TO ADD NNI LIST TO PROTOCOL CONFIGURATION     */
/*----------------------------------------------------------*/
template emit-nni-interfaces($platform, $got) {
	for-each ($got/groups[name=$ZTP_GROUP_PLATFORM]/apply-macro[name=$ZTP_MACRO_NAME_PREFIX _ $platform]/data/name) {
		if ( contains(../name,"NNI" )){
			expr jcs:progress( "ZTP-SCRIPT: Configuring NNI interface: " _ ../value);
			<interface> {
				<name> ../value _ ".0";
			}
		}
	}
}
/* ------------------------------------------------------------------ */
/* GET LOCAL HOST NAME */
/* ------------------------------------------------------------------ */
function ztp_script:get_host_name() {
     expr jcs:progress( "ZTP-SCRIPT: Getting box host-name." );
     expr jcs:syslog( $SYSLOG, $APPNAME _ ": ZTP-SCRIPT: Getting box host-name." );
     /* get host name */
    var $system_sw_info := jcs:execute( $jnx, 'get-software-information' );
    var $host_name = {
		if ( $system_sw_info//host-name) {
			expr $system_sw_info//host-name;
		} else {
			expr false();
		}
	}
	result $host_name;
}
/* ------------------------------------------------------------------ */
/* GET LOCAL ROUTER ID */
/* ------------------------------------------------------------------ */
function ztp_script:get_router_id() {
    expr jcs:progress( "ZTP-SCRIPT: Getting box Router ID" );
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": Getting box Router ID" );
    /* get our serial number */
    var $router_sum_info := jcs:execute( $jnx, 'get-route-summary-information' );
    var $router_id = {
		if ( $router_sum_info/router-id ) {
			expr $router_sum_info/router-id;
		} else {
			expr false();
		}
	}
	result $router_id;
}
/* ------------------------------------------------------------------ */
/* GET SERIAL NUMBER */
/* ------------------------------------------------------------------ */
function ztp_script:get_serial_number() {
     expr jcs:progress( "ZTP-SCRIPT: Getting box Serial Number" );
     expr jcs:syslog( $SYSLOG, $APPNAME _ ": Getting box Serial Number" );
     /* get our serial number */
    var $chassis_hardware := jcs:execute( $jnx, 'get-chassis-inventory' );
    var $serial_no = $chassis_hardware/chassis/serial-number;
    expr jcs:progress( "ZTP-SCRIPT: serial no = " _ $serial_no );
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": serial no = " _ $serial_no );
	result $serial_no;
}
/* ------------------------------------------------------------------ */
/* GET ACTIVE OSPF NEIGHBORS */
/* ------------------------------------------------------------------ */
function ztp_script:get_opsf_status() {
     expr jcs:progress( "ZTP-SCRIPT: Getting active ospf neighbors" );
     expr jcs:syslog( $SYSLOG, $APPNAME _ ": Getting active ospf neighbors" );
     /* show ospf neighbors */
    var $get_ospf_neighbors = <get-ospf-neighbor-information> {<detail>;}	
	var $got_ospf_neighbors := jcs:execute( $jnx, $get_ospf_neighbors );
	mvar $ospf_status = false();
    for-each ($got_ospf_neighbors/ospf-neighbor/neighbor-address) {
		set $ospf_status = {
			if ( ../ospf-neighbor-state == "Full") {
				expr true();
			}
		}
	}
	result $ospf_status;
}
/* ------------------------------------------------------------------ */
/* GET OSPF ABRs AND PRIMARY NEXT-HOP */
/* ------------------------------------------------------------------ */
function ztp_script:get_ospf_abrs() {
     expr jcs:progress( "ZTP-SCRIPT: Getting ospf abr" );
     expr jcs:syslog( $SYSLOG, $APPNAME _ ": Getting ospf abr" );
     /* show ospf neighbors */
    var $get_ospf_abr = <get-ospf-route-information> {<abr>;}	
	var $got_ospf_abr := jcs:execute( $jnx, $get_ospf_abr );
	result $got_ospf_abr;
}
/* ------------------------------------------------------------------ */
/* GET LLDP NEIGHBORS */
/* ------------------------------------------------------------------ */
function ztp_script:get_lldp_neighbors() {
     expr jcs:progress( "ZTP-SCRIPT: Getting lldp neighbors" );
     expr jcs:syslog( $SYSLOG, $APPNAME _ ": Getting lldp neighbors" );
     /* show lldp neighbors */
    var $get_lldp_neighbor = <get-lldp-neighbors-information>;	
	var $got_lldp_neighbor := jcs:execute( $jnx, $get_lldp_neighbor );
	result $got_lldp_neighbor;
}
/* ------------------------------------------------------------------ */
/* GET TYPE OF THE PLATFORM */
/* ------------------------------------------------------------------ */
function ztp_script:get_platform() {
    expr jcs:progress( "ZTP-SCRIPT: Retrieve type of platform" );
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": Retrieve Platform Type" );
     /* get platform */
    var $chassis_software := jcs:execute( $jnx, 'get-software-information' );
    var $ztp_platform = {
		if ( $chassis_software//product-model) {
			expr $chassis_software//product-model;
		} else {
            expr $chassis_software/software-information/product-model;
		}
	}
    expr jcs:progress( "ZTP-SCRIPT: platform = " _ $ztp_platform );
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": platform = " _ $ztp_platform );
	result $ztp_platform;
}
/* ------------------------------------------------------------------ */
/* FUNCTION VERIFIES IF THERE IS A VALID MACROS FOR THE PLATFORM      */
/* ------------------------------------------------------------------ */
function ztp_script:ztp_grp_exists($group_name, $macro_name = "N/A", $serial_no = "N/A") {
	var $get_grp = <get-configuration> {
         <configuration> {
            <groups> {
				<name>;
			}
	    }
    }
	/* geting variables from apply-macro */
	var $got_grp = jcs:execute( $jnx, $get_grp );
	mvar $grp_flag = "skip";
	for-each ($got_grp/groups/name) {
		set $grp_flag = {
			if  ((../name!=$group_name) and ($grp_flag!="exists")) {
			    expr "skip";
			} else {
				expr "exists";
			} /* End if */
		}
    }
	/* Verification for the apply-macro */	
    if ($grp_flag != "exists") {
		expr jcs:progress( "ZTP-SCRIPT: Can't find a group " _ $group_name);
        result false();
	} else {
		expr jcs:progress( "ZTP-SCRIPT: Found a group " _ $group_name);
		if ( $macro_name!="N/A") {
	        expr jcs:progress( "ZTP-SCRIPT: Looking for apply-macro " _ $macro_name _ " in group " _ $group_name );
	        /* Look for apply-macro with specified name */
	        var $get_mcr = <get-configuration> {
                <configuration> {
                    <groups> {
				        <name> $group_name;
			        }
	            }
            }
	        /* geting variables from apply-macro */
	        var $got_mcr = jcs:execute( $jnx, $get_mcr );
	        mvar $mcr_flag = "skip";
	        for-each ($got_mcr/groups[name=$group_name]/apply-macro/name) {
		        set $mcr_flag = {
			        if  ((../name!=$macro_name) and ($mcr_flag!="exists")) {
			            expr "skip";
			        } else {
				        expr "exists";
			        } /* End if */
		        }
            }
	        /* Verification for the group */	
            if ($mcr_flag != "exists") {
		        expr jcs:progress( "ZTP-SCRIPT: Can't find apply-macro " _ $macro_name );
		        result false();
	        } else {
		        expr jcs:progress( "ZTP-SCRIPT: Found apply-macro " _ $macro_name );
			    result true();
	        }		
	    } else {
			result true();
		}
	}	
}	
/* ------------------------------------------------------------------ */
/* Helper routines
/* ------------------------------------------------------------------ */
function ztp_script:file-copy( $source, $filename, $destination ) {
	var $copy_get = <file-copy> {
        <source> $source _ "/" _ $filename;
        <destination> $destination _ "/" _ $filename;
        <staging-directory> $TMPDIR;
    }
    var $copy_got = jcs:execute( $jnx, $copy_get );
    result true();
}
function ztp_script:file-exists( $filename ) {
    var $ls_file = <file-list> { <path> $filename; }
    var $ls_got = jcs:execute( $jnx, $ls_file );
    var $retval = boolean( $ls_got//file-information );
    result $retval;
}
function ztp_script:file-delete( $filename ) {
    var $do_rm = <file-delete> { <path> $filename; }
    var $did_rm = jcs:execute( $jnx, $do_rm );
    /* @@@ trap error */
    result true();
}
function ztp_script:only_once() {
    if( ztp_script:file-exists( $ZTP_LOCKFILE )) {
        result true();
    } else {
        var $do_lock = <file-put> {
             <filename> $ZTP_LOCKFILE;
             <encoding> 'ascii';
             <file-contents> 'locked';
        }
    var $did_lock = jcs:execute( $jnx, $do_lock );
    result false();
    }
}
function ztp_script:terminate() {
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": SCRIPT-TERMINATE" );
    var $rm_lock = ztp_script:file-delete( $ZTP_LOCKFILE );
    terminate;
}
