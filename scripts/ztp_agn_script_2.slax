version 1.1;
/* ------------------------------------------------------------------ */
/* This program performs Zero touch provisioning for the ACX platform */
/* It will set up OAM VLAN and Bridge Domain to allow permanent       */
/* management access to the box.  */
/* */
/* Version 1.0 Vasily Mukhin vmukhin@juniper.net */
/* Based on jctyztp script by Jeremy Schulman and Brian Sherwood */
/* */
/* ------------------------------------------------------------------ */
/* ------------------------------------------------------------------ */
/* XML namespaces */
/* ------------------------------------------------------------------ */
/* Juniper */
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns exsl extension = "http://exslt.org/common";
/* EXSLT */
ns str extension = "http://exslt.org/strings";
/* private namespace for this script */
ns ztp_script = "http://xml.juniper.com/ztp_script/1.0";
import '../import/junos.xsl';
/* ------------------------------------------------------------------ */
/* Script parameters */
/* ------------------------------------------------------------------ */
/* param $server = '10.253.43.29'; */
/* ------------------------------------------------------------------ */
/* Constants */
/* ------------------------------------------------------------------ */
var $APPNAME = 'ztp_script[' _ $junos-context/pid _ ']';
var $SYSLOG = 'user.info';
var $TMPDIR = '/var/tmp';
var $CODEDIR = '/var/tmp';
var $ZTP_VERSION_FILE = "/var/tmp/ztp_agn_version.ztp";
var $VERSION = "Version: ";
var $VERSION_PREFIX = "v.";
var $ZTP_VERSION = "VERSION";
var $ZTP_GROUP_AGN = "GR-ZTP-AGN-";
var $ZTP_GROUP_NNI_TAG = "GR-NNI-TAG";
var $ZTP_GROUP_AGG_NNI_TAG = "GR-AGG-INTF-TAG";
var $ZTP_GROUP_STAGE_1 = "GR-ZTP-STAGE-1";
var $ZTP_GROUP_STAGE_2 = "GR-ZTP-STAGE-2";
var $ZTP_GROUP_SPACE = "GR-ZTP-SPACE";
var $ZTP_MACRO_PREFIX = "ZTP-";
var $ZTP_GROUP_BOX = "GR-ZTP-BOX";
var $ZTP_BD_OAM = "BD-ZTP-OAM";
var $ZTP_OAM_VLAN = "OAM_VLAN";
var $ZTP_BOOT_VLAN = "BOOT_VLAN";
var $ZTP_LOOPBACK = "Lo0";
var $ZTP_CODE_MACRO_NAME = "code";
var $ZTP_CONFIG_MACRO_NAME = "config";
var $ZTP_GLOBAL_MACRO_NAME = "GLOBAL";
var $ZTP_LOCKFILE = '/tmp/ztp_script.lock';
var $ZTP_VLAN_SPARE = "4094";
var $ZTP_INVENTORY_FILE = "modeling_devices.csv";
var $ZTP_AGN_CONFIG = "ztp_param_agn_";
var $ZTP_SPACE_COFIGLET_FILE = "modeling-device-ring-1010.conf";
var $ZTP_SPACE_CONFIGLET_SRC = "ftp://vmukhin:jnpr1234@23.0.100.3://config";
var $PATTERN = "system";
var $ZTP_VPLS_RD = "VPLS_RD"; 
var $ZTP_DHCP_IP = "DHCP_IP";
var $ZTP_INTER_RNG = "ABR_INTERCONNECT_RANGE";
var $ZTP_INTER_SIDE = "ABR_INTERCONNECT_SIDE";
var $ZTP_IRB_IP = "IRB_IP";
var $ZTP_VRRP_IP = "VRRP_IP";
var $ZTP_VRRP_GRP = "VRRP_GROUP";
var $ZTP_OSPF_AREA = "OSPF_AREA";
var $ZTP_VSI = "VSI-ZTP-";
var $ZTP_VSI_BOOT = "VSI-ZTP-BOOTP";
var $ZTP_BD = "VLAN-OAM";
var $ZTP_BD_BOOT = "VLAN-BOOTP";
var $ZTP_DHCP_GRP = "ZTD-DHCP";
var $ZTP_NNII = "NNII";
var $ZTP_OSPF_EXP_POLICY = "PL-OSPF-SUMMARY-EXPORT";
var $ZTP_OSPF_IMP_POLICY = "PL-OSPF-REJECT-ALL-IMPORT";

/* ------------------------------------------------------------------ */
/* Global variables */
/* ------------------------------------------------------------------ */
var $jnx = jcs:open();
/* ------------------------------------------------------------------ */
/* MAIN */
/* ------------------------------------------------------------------ */
match / {
	mvar $ztp_result = false();
    if( not( $jnx )) {
        expr jcs:syslog( $SYSLOG, $APPNAME _ ": ERROR: unable to connect to Junos API");
        expr jcs:progress( "ZTP-SCRIPT: ERROR: unable to connect to Junos API");
        expr jcs:output( $APPNAME _ ":ERROR: unable to connect to Junos API");
        terminate;
    }
    var $running = ztp_script:only_once();
    if( $running ) {
        expr jcs:syslog( $SYSLOG, $APPNAME _ ": process already running, backing off" );
        expr jcs:progress( "ZTP-SCRIPT: process already running, backing off" );
        expr jcs:output( $APPNAME _ ": process already running, backing off" );
        terminate;
    }
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": SCRIPT-BEGIN" );
    expr jcs:progress( "ZTP-SCRIPT: SCRIPT-BEGIN" );
	var $lo0_prefix = ztp_script:get_router_id();
	var $as_number = ztp_script:get_as_number();
	expr jcs:progress( "ZTP-SCRIPT: Router ID: " _ $lo0_prefix  );
	expr jcs:progress( "ZTP-SCRIPT: AS Number: " _ $as_number  );
    expr jcs:progress( "ZTP-SCRIPT: ***************************************************************");
	expr jcs:progress( "ZTP-SCRIPT: ************* Loading new ZTP Parameters file from ftp ********");
	expr jcs:progress( "ZTP-SCRIPT: ***************************************************************");
    /*-------------------------------------------------------*/
	/*  DOWNLOAD NEW ZTP PARAMETERS FROM FTP SERVER          */
    /*-------------------------------------------------------*/
	mvar $filename =  $ZTP_AGN_CONFIG _ $lo0_prefix _ ".conf";
	if (not (ztp_script:file-copy($ZTP_SPACE_CONFIGLET_SRC, $filename , $TMPDIR))) {
	expr jcs:progress( "ZTP-SCRIPT: Cant' find file: " _ $filename _ " on ftp server. Terminating script");
	expr jcs:syslog( $SYSLOG, $APPNAME _ "Cant' find file: " _ $filename _ " on ftp server. Terminating script");
	var $die = ztp_script:terminate();	
	}
	set $filename = $TMPDIR _ "/" _ $filename;
	if (not (ztp_script:file-exists( $filename ))) {
		expr jcs:progress( "ZTP-SCRIPT: Cant' find " _ $filename _ ". Terminating script");
		expr jcs:syslog( $SYSLOG, $APPNAME _ "Cant' find " _ $filename _ ". Terminating script");
		var $die = ztp_script:terminate();	
	} 
	mvar $nRollback = 0;
	/*-------------------------------------------------------*/
	/*  LOOKING FOR OLD ZTP PARAMETERS                       */
    /*-------------------------------------------------------*/
    mvar $ztp_old_version = false();
    mvar $ztp_new_version = "";	
	if ( ztp_script:ztp_grp_exists($ZTP_GROUP_AGN _ $lo0_prefix ) ) {
     	expr jcs:progress( "ZTP-SCRIPT: Found old ZTP parameters for AGN Router ID: " _ $lo0_prefix  );
		var $get_old_ztp = <get-configuration> {
			 <configuration> {
				<groups>;
			}
		}
		var $got_old_ztp = jcs:execute( $jnx, $get_old_ztp );
		set $ztp_old_version = $got_old_ztp/groups[name=$ZTP_GROUP_AGN _ $lo0_prefix]/apply-macro[name=$ZTP_GLOBAL_MACRO_NAME]/data[name=$ZTP_VERSION]/value;
		/* read new veersion number from ZTP parameter file */
		set $ztp_new_version = ztp_script:get_ztp_version($filename);
		if (not($ztp_new_version)) {
			expr jcs:progress( "ZTP-SCRIPT: Wrong new version format or version not found. Check ZTP parameters file" );
			expr jcs:progress( "ZTP-SCRIPT: SCRIPT END" );
		    var $die = ztp_script:terminate();
		}
		if($ztp_new_version <= substring-after($ztp_old_version,"v.")) {			
			expr jcs:progress( "ZTP-SCRIPT: Old ZTP configuration version " _ $ztp_old_version  );
			expr jcs:progress( "ZTP-SCRIPT: New ZTP Configuration version v." _ $ztp_new_version );
		    expr jcs:progress( "ZTP-SCRIPT: ZTP Configuration version was already applied" );
			expr jcs:progress( "ZTP-SCRIPT: SCRIPT END" );
		    var $die = ztp_script:terminate();
		}
		var $delete_ztp = {
			<configuration> {
				for-each($got_old_ztp/groups/name) {
					if  (contains(.,$ZTP_GROUP_AGN)) {
        				<groups  delete="delete"> {
							expr jcs:progress( "ZTP-SCRIPT: Mark group: " _ . _ " for deletion"  );
							<name> .;
						}
					}
				}
			}
		}
		var $options_1 := {
			 <commit-options> {
				<full>;
				<log> "Commiting ZTP configuration for AGN node"; 
			}
		}
		var $delete_results := { call jcs:load-configuration( $action="merge", $commit-options=$options_1, $configuration=$delete_ztp, $connection = $jnx ); } 
		/*expr jcs:progress( "ZTP-SCRIPT: " _ $delete_results ); */
		if ($delete_results//xnm:warning) {
			for-each ($delete_results//xnm:warning) {
				expr jcs:progress( "ZTP-SCRIPT: commit warning: " _ message );
			}
		}
		if ($delete_results//xnm:error) {
			for-each ($delete_results//xnm:error) {
				expr jcs:progress( "ZTP-SCRIPT: commit error: " _ message );
			}
			expr jcs:progress( "ZTP-SCRIPT: Script failed." );
			var $die = ztp_script:terminate();
		} else {
			expr jcs:progress( "ZTP-SCRIPT: OLD ZTP CONFIGURATION WAS DELETED");
			set $nRollback = $nRollback + 1;
		}	 
    }
	/*-------------------------------------------------------*/
	/*  LOAD NEW ZTP PARAMETERS                              */
    /*-------------------------------------------------------*/
    if (not (ztp_script:load_config($filename, "merge", true()))) {
        expr jcs:progress( "ZTP-SCRIPT: SCRIPT FAILED TO UPDATE ZTP CONFIG.");
		var $del_ztp_config_file = ztp_script:file-delete( $filename );
		var $rollback_options := {
            <commit-options> {
				<full>;
			}
		}
		expr jcs:progress( "ZTP-SCRIPT:Rollback old configuration.");
		var $rollback_configuration := { call jcs:load-configuration( $commit-options = $rollback_options, $rollback = $nRollback, $connection = $jnx ); } 
		var $die = ztp_script:terminate();

    } else {
        expr jcs:progress( "ZTP-SCRIPT: ZTP PARAMETERS Version v." _ $ztp_new_version _ " SUCCESSFULLY LOADED" );
		var $del_ztp_config_file = ztp_script:file-delete( $filename );
		set $nRollback = $nRollback + 1;
	}
    expr jcs:progress( "ZTP-SCRIPT: ***************************************************************");
	expr jcs:progress( "ZTP-SCRIPT: **************** Start Network Provisioning *******************");
	expr jcs:progress( "ZTP-SCRIPT: ***************************************************************");
	/*-------------------------------------------------------*/
	/*  GET GLOBAL ZTP PARAMETERS                            */
    /*-------------------------------------------------------*/
	if ( not( ztp_script:ztp_grp_exists($ZTP_GROUP_AGN _ $lo0_prefix , $ZTP_GLOBAL_MACRO_NAME) ) ) {
	expr jcs:progress( "ZTP-SCRIPT: There is no ZTP configuration for local AGN router with Router ID: " _ $lo0_prefix  );
	var $die = ztp_script:terminate();
	}
	/* geting ospf configuration */
    var $get_ospf_config = <get-configuration> {
         <configuration> {
            <protocols> {
               <ospf>;
            }
        }
    }
	var $ospf_config = jcs:execute( $jnx, $get_ospf_config );
	/* geting variables from apply-macro */
	var $get = <get-configuration> {
         <configuration> {
            <groups> {
               <name> $ZTP_GROUP_AGN _ $lo0_prefix;
            }
        }
    }
	var $got = jcs:execute( $jnx, $get );
	var $got_copy = $got;
	/* global ztp parameters for AGN router */
    if ($ztp_old_version) {
	    var $ztp_current_version = $got/groups[name=$ZTP_GROUP_AGN _ $lo0_prefix]/apply-macro[name=$ZTP_GLOBAL_MACRO_NAME]/data[name=$ZTP_VERSION]/value;
    	if(substring-after($ztp_current_version,"v.") <= substring-after($ztp_old_version,"v.")) {			
			expr jcs:progress( "ZTP-SCRIPT: Old ZTP configuration version " _ $ztp_old_version  );
			expr jcs:progress( "ZTP-SCRIPT: New ZTP Configuration version " _ $ztp_current_version );
		    expr jcs:progress( "ZTP-SCRIPT: ZTP Configuration version was already applied" );
			var $rollback_options := {
				<commit-options> {
					<full>;
					<log> "Rollback to previous ZTP config"; 
				}
			}
			expr jcs:progress( "ZTP-SCRIPT: Rollback(" _ $nRollback _ ") to previous configuration." );
			var $rollback_configuration := { call jcs:load-configuration( $commit-options = $rollback_options, $rollback = $nRollback, $connection = $jnx ); } 
			expr jcs:progress( "ZTP-SCRIPT: SCRIPT END" );
		    var $die = ztp_script:terminate();
		}
	}
	var $ztp_oam_vlan = $got/groups[name=$ZTP_GROUP_AGN _ $lo0_prefix]/apply-macro[name=$ZTP_GLOBAL_MACRO_NAME]/data[name=$ZTP_OAM_VLAN]/value;
	var $ztp_boot_vlan = $got/groups[name=$ZTP_GROUP_AGN _ $lo0_prefix]/apply-macro[name=$ZTP_GLOBAL_MACRO_NAME]/data[name=$ZTP_BOOT_VLAN]/value;	
/*    var $ztp_rd = $got/groups[name=$ZTP_GROUP_AGN _ $lo0_prefix]/apply-macro[name=$ZTP_GLOBAL_MACRO_NAME]/data[name=$ZTP_VPLS_RD]/value; */
	var $dhcp_srv_ip = $got/groups[name=$ZTP_GROUP_AGN _ $lo0_prefix]/apply-macro[name=$ZTP_GLOBAL_MACRO_NAME]/data[name=$ZTP_DHCP_IP]/value;	
	expr jcs:progress( "ZTP-SCRIPT: reading global ztp parameters: ");
	expr jcs:progress( "OAM VLAN=" _ $ztp_oam_vlan);
/*	expr jcs:progress( "BOOT_VLAN=" _ $ztp_boot_vlan); */
	/* expr jcs:progress( "OAM VPLS Instance RD postfix " _ $ztp_rd); */
	expr jcs:progress( "DHCP Server IP address " _ $dhcp_srv_ip);
	mvar $ospf_area = "";
	mvar $macro_name = "";
	mvar $macro_name_1 = "";
	mvar $irb_ip_addr = "";
	mvar $vrrp_vip_addr = "";
	mvar $vrrp_grp = "";
	mvar $nnii_device = "";
	mvar $nnii_unit = "";
	mvar $nnii_ip_addr = "";
	mvar $nnii_vlan = "";
	mvar $nni_device = "";
	mvar $multi_nni_records = false();
	mvar $nni_exists = true();
	mvar $ztp_vpls_exists = true();
	mvar $ztp_irb_exists = true();
	mvar $ztp_area_exists = true();
	mvar $ztp_nnii_exists = true();
	mvar $ztp_nni_exists = true();
	mvar $ztp_ospf_area = "";
	mvar $irb_unit = "";
	mvar $vpls_site_id = "1000";
	mvar $ip_addr = "";
	mvar $a4 = 0;
	mvar $agn_parity = 0;
	mvar $vpls_rd = "";
	mvar $results = "";
    var $change = {
        <configuration> {
			for-each($got/groups[name=$ZTP_GROUP_AGN _ $lo0_prefix]/apply-macro/name) {
				if ( contains(../name,"AREA")) {
					set $results = true();
					set $ztp_area_exists = false();
					set $ztp_nnii_exists = false();
					set $ztp_nni_exists = false();
					set $ztp_vpls_exists = false();
					set $ztp_irb_exists = false();
					set $macro_name = .;
					expr jcs:progress( "ZTP-SCRIPT: ***************************************************************");
					expr jcs:progress( "ZTP-SCRIPT: **************** Processing macro name: " _ $macro_name _ "****************");
					expr jcs:progress( "ZTP-SCRIPT: ***************************************************************");
    				expr jcs:progress( "ZTP-SCRIPT: Will try to setup configuration for OSFP area: " _ ../data[name = $ZTP_OSPF_AREA]/value);
					set $ospf_area = ../data[name = $ZTP_OSPF_AREA]/value;
				/* CHECK IF OSPF AREA ALREADY EXISTS */
					if ($ospf_config/protocols/ospf/area[name=$ospf_area]) {
					    expr jcs:progress( "ZTP-SCRIPT: OSPF area " _ $ospf_area _ " already exists. Skip creation of configuration for the area.");
						set $ztp_area_exists = true();
					}
					set $agn_parity = { if ((../data[name = $ZTP_INTER_SIDE]/value)=="left") {expr "2";} else {expr "1";}}
					expr jcs:progress( "ZTP-SCRIPT: AGN Parity: " _ ../data[name = $ZTP_INTER_SIDE]/value);
					set $nnii_device = ../data[name = $ZTP_NNII _ "-1"]/value;
					set $nnii_unit = substring-after($macro_name, "AREA_");
				/* CHECK IF INTERCONNECT NNI TO OTHER AGN ALREADY EXISTS */
					if (ztp_script:element_exists_unit($nnii_device, $nnii_unit )) {
						expr jcs:progress( "ZTP-SCRIPT: AGN Interconnect NNI " _ $nnii_device _ " unit " _ $nnii_unit _ " already exist.");
						set $ztp_nnii_exists = true();
						if (not($ztp_area_exists)) {
							set $results = false();
							expr jcs:progress( "ZTP-SCRIPT: ERROR: Configuration inconsistancy found. Skip configuration for macro " _ $macro_name );
						} else {
							expr jcs:progress( "ZTP-SCRIPT: Skip configuration Interconnect NNI " _ $nnii_device _ " unit " _ $nnii_unit );
						}
					} else {
						expr jcs:progress( "ZTP-SCRIPT: Interconnect NNI: " _ $nnii_device _ "." _ $nnii_unit );
					}
				/* CHECK VLAN-ID FOR INTERCONNECT NNI TO OTHER AGN ALREADY EXISTS */
					set $nnii_vlan = $nnii_unit;
					if (ztp_script:element_exists_vlan($nnii_device, $nnii_vlan)) {
					    expr jcs:progress( "ZTP-SCRIPT: VLAN-ID " _ $nnii_vlan _ " already used on Interconnect NNI " _ $nnii_device );
					    if ((not($ztp_area_exists)) and (not(ztp_nnii_exists))) {
							set $results = false();
							expr jcs:progress( "ZTP-SCRIPT: Configuration Inconsistency found. Skip configuration for macro " _ $macro_name );
						} 
					} else {
					    expr jcs:progress( "ZTP-SCRIPT: Interconnect NNI vlan-id: " _ $nnii_vlan);
					}
				/* CHECK IRB UNIT  ALREADY EXISTS*/
					set $irb_unit = $nnii_unit;						
					if (ztp_script:element_exists_unit("irb", $irb_unit )) {
						expr jcs:progress( "ZTP-SCRIPT: irb." _ $irb_unit _ " already exists.");
						set $ztp_irb_exists = true();
						if (not($ztp_area_exists)) {
							set $results = false();
							expr jcs:progress( "ZTP-SCRIPT: ERROR: Configuration inconsistancy found. Skip configuration for macro " _ $macro_name );
						} else {
							expr jcs:progress( "ZTP-SCRIPT: Skip configuration for irb. " _ $irb_unit );
						}
					} else {
						expr jcs:progress( "ZTP-SCRIPT: IRB Interface for OAM VLAN: irb." _ $irb_unit);
					}
				/* VRRP SETTINGS */
	                set $vrrp_vip_addr = ../data[name = $ZTP_VRRP_IP]/value;
					expr jcs:progress( "ZTP-SCRIPT: VRRP VIP address: " _ $vrrp_vip_addr);
	                set $vrrp_grp = ../data[name = $ZTP_VRRP_GRP]/value;	
					expr jcs:progress( "ZTP-SCRIPT: VRRP grpoup number: " _ $vrrp_grp);
				/* CHECK VRF RD  ALREADY EXISTS */
/*			        set $vpls_rd = $ztp_rd + substring-after($macro_name, "AREA_");
					set $vpls_site_id = $vpls_rd _ $agn_parity;
					set $vpls_rd = $lo0_prefix _ ":" _ $vpls_rd;
					if (ztp_script:element_exists_rd($vpls_rd)) {
						expr jcs:progress( "ZTP-SCRIPT: Route distinguisher " _ $vpls_rd _ " already exist.");
						set $ztp_vpls_exists = true();
						if (not($ztp_area_exists)) { 
							set $results = false();
							expr jcs:progress( "ZTP-SCRIPT: ERROR: Configuration inconsistancy found. Skip configuration for macro " _ $macro_name );
						} else {
							expr jcs:progress( "ZTP-SCRIPT: Skip configuration for routing instance. " _ $ZTP_VSI _ substring-after($macro_name,"AREA_"));
						}
					} else {
						expr jcs:progress( "ZTP-SCRIPT: OAM VPLS RI Route distinguisher " _ $vpls_rd);
					}
*/					if ($results) {
						set $ztp_result = true();
						set $nnii_ip_addr = ../data[name = $ZTP_INTER_RNG]/value;
						set $ip_addr = substring-before($nnii_ip_addr,".") _ ".";
						set $ip_addr = $ip_addr _ substring-before(substring-after($nnii_ip_addr,$ip_addr),".") _ ".";
						set $ip_addr = $ip_addr _ substring-before(substring-after($nnii_ip_addr,$ip_addr),".") _ ".";
						set $a4 = $nnii_unit * 4 + $agn_parity;
						set $nnii_ip_addr = $ip_addr _ $a4 _ "/30";
						expr jcs:progress( "ZTP-SCRIPT: Interconnect NNI IP address: " _ $nnii_ip_addr);
						set $irb_ip_addr = ../data[name = $ZTP_IRB_IP]/value;
						if (not (contains($irb_ip_addr,"/"))) {
							set $irb_ip_addr = $irb_ip_addr _ "/24";
						}
						expr jcs:progress( "ZTP-SCRIPT: irb." _ $irb_unit _ " will be configured with IP address: " _ $irb_ip_addr );					

					/* BUILD NEW CONFIGURATION FOR: 
					      - AGN INTERCONNECT, 
						  - OSPF AREA, 
						  - VPLS INSTANCE, 
						  - IRB, 
						  - VRRP GROUP, 
						  - DHCP SERVER GROUP              */
						<interfaces> {
							if (not($ztp_nnii_exists)) { 
								<interface> {
									<name> $nnii_device;
									<unit> {
										<name> $nnii_unit;
										<vlan-id> $nnii_vlan;
										<family> {
											<inet> {
												<address> $nnii_ip_addr;
											}
											<mpls>;
										}
									}
								}
							}
							if (not($ztp_irb_exists)) {
								<interface> {
									<name> "irb";
									<unit> {
										<name> $irb_unit;
										<family> {
											<inet> {
												<address> {
													<name> $irb_ip_addr;
													<vrrp-group> {
														<name> $vrrp_grp;
														<virtual-address> $vrrp_vip_addr;
														if ($agn_parity==1) {
															<priority> "254";
														}
													}
												}
											}
										}
									}
								}
							} 
						}
						if (not($ztp_irb_exists)) {
							<forwarding-options> {
								<dhcp-relay> {
									<server-group> {
										<server-group> {
											<name> $ZTP_DHCP_GRP;
											<address> $dhcp_srv_ip;
										}
									}
									<active-server-group> $ZTP_DHCP_GRP;
									<group>{
										<name> $ZTP_DHCP_GRP;
										<interface> "irb." _ $irb_unit; 
									}
								}
							}
							<routing-instances> {
								expr jcs:progress( "ZTP-SCRIPT: Creating configuration for VS RI: " _ $ZTP_VSI _ substring-after($macro_name,"AREA_"));
								<instance> {
									<name> $ZTP_VSI _ substring-after($macro_name,"AREA_");
									<bridge-domains> {
										<domain> {
											<name> $ZTP_BD;
											<vlan-id> $ztp_oam_vlan;
									/*		<no-local-switching>;  */
											<routing-interface> "irb." _ $irb_unit;
										}
									}
								}
						    }
						}
						<protocols> {
							<ospf> {
							    if (not($ztp_irb_exists)) {
									<area> {
										<name> "0.0.0.0";
										<interface> {
											<name> "irb." _ $irb_unit;
											<passive>;
										}
									}
								}
								<area> {
									<name> $ospf_area;
									<network-summary-export> $ZTP_OSPF_EXP_POLICY;
									<network-summary-import> $ZTP_OSPF_IMP_POLICY;
							        if (not($ztp_nnii_exists)) {									
										<interface> {
											<name> $nnii_device _ "." _ $nnii_unit;
										}								
									}
								}
							}
							if (not($ztp_nnii_exists)) {																
								<mpls> {
									<interface> {
										<name> $nnii_device _ "." _ $nnii_unit;
									}								
								}
								<rsvp> {
									<interface> {
										<name> $nnii_device _ "." _ $nnii_unit;
									}								
								}
								<lldp> {
									<interface> {
										<name> $nnii_device;
									}								
								}							
							}
						}
					    if (not($ztp_vpls_exists)) {															
							<routing-instances> {
								expr jcs:progress( "ZTP-SCRIPT: Creating configuration for VS RI: " _ $ZTP_VSI _ substring-after($macro_name,"AREA_"));
								<instance> {
									<name> $ZTP_VSI _ substring-after($macro_name,"AREA_");
									<instance-type> "virtual-switch";
/*									<route-distinguisher> {
										<rd-type> $vpls_rd;
									}
									<vrf-target> {
										<community> "target:" _ $as_number _ ":" _ substring-after($vpls_rd, ":");
									}
									<protocols> {
										<vpls> {
											<no-tunnel-services>;
											<site> {
												<name> "AGN-" _ $lo0_prefix _ "-" _ $vpls_site_id;
												<site-identifier> $vpls_site_id;
											}
										}
									}
*/								}
						    }
						}
					} else {
						expr jcs:progress( "ZTP-SCRIPT: Skip creating configuration for OSPF area " _ $ospf_area);
					}
					/* SETTING UP NNI INTERFACES */
					if ($results) {
						for-each(../data/name) {
							if (contains(../name,"NNI-")) {
								set $nni_device = ../value;
								set $multi_nni_records = false();
							/* - CHECK IF NNI IS REQUESTED FOR ONLY ONE OSPF AREA */
								for-each($got_copy/groups[name=$ZTP_GROUP_AGN _ $lo0_prefix]/apply-macro/name) {
									if (( contains(../name,"AREA")) and (../name!=$macro_name)) {
										 for-each(../data/name) {
											if ((../value==$nni_device) or ($multi_nni_records)) {
												expr jcs:progress( "ZTP-SCRIPT: ERROR: NNI Device " _ $nni_device _ " can't be configured in more than one ospf areas.");
												expr jcs:progress( "ZTP-SCRIPT: Skip NNI " _ $nni_device _ " from adding to configuration");
												set $multi_nni_records = true();
												/* var $die = ztp_script:terminate(); */
											}
										}
									}
								}
								set $nni_exists = false();
								set $ztp_nni_exists = false();
								if (ztp_script:element_exists_ifd($nni_device)) {
									set $nni_exists = true();
									set $ztp_nni_exists = false();
									for-each($got_copy/groups[name=$ZTP_GROUP_AGN _ $lo0_prefix]/apply-macro/name) {
										if ( contains(../name,"AREA")) {
											set $ztp_ospf_area	= ../data[name = $ZTP_OSPF_AREA]/value;
											if (($ospf_config/protocols/ospf/area[name=$ztp_ospf_area]/interface[name=$nni_device _ ".0"]) or ($ztp_nni_exists)){
												set $ztp_nni_exists = true();
											}
										}
									}
								}
								if (($nni_exists) and ( not ($ztp_nni_exists))) {
									expr jcs:progress( "ZTP-SCRIPT: ERROR: NNI " _ $nni_device _ " is already in use and can't be used for ZTP configuration");
									expr jcs:progress( "ZTP-SCRIPT: Skip NNI " _ $nni_device _ " from adding to configuration");
								}
                                if 	(((not($nni_exists)) or (($nni_exists) and ($ztp_nni_exists))) and (not($multi_nni_records))) {
									expr jcs:progress( "ZTP-SCRIPT: Creating NNI: " _ $nni_device);
									<interfaces> {
										<interface> {
											<name> $nni_device;
											<apply-groups> $ZTP_GROUP_AGG_NNI_TAG;										
											<native-vlan-id> $ztp_oam_vlan;
											<flexible-vlan-tagging>;
											<encapsulation> "flexible-ethernet-services";
											<unit> {
												<name> "0";
												<vlan-id> "1";
												<family> {
													<inet> {
														<unnumbered-address> {
															<source> "lo0.0";
														}
													}
												}
											}
											<unit> {
												<name> $ztp_oam_vlan;
												<vlan-id> $ztp_oam_vlan;
												<encapsulation> "vlan-bridge";											
												<family> {
													<bridge>;
												}
											}
/*											<unit> {
												<name> $ztp_boot_vlan;
												<vlan-id> $ztp_boot_vlan;
												<encapsulation> "vlan-bridge";
												<family> {
													<bridge>;
												}
											}
*/    									}
									}
									<routing-instances> {
										expr jcs:progress( "ZTP-SCRIPT: Adding interfaces to VSI/BD: " _ $ZTP_VSI _ substring-after($macro_name,"AREA_") _ "/" _ $ZTP_BD);
										<instance> {
											<name> $ZTP_VSI _ substring-after($macro_name,"AREA_");
											<protocols> {
												<vstp> {
													<interface> {
														<name> ../value;
													}
													<vlan> {
														<name> $ztp_oam_vlan;
													}
												}
											}
											<bridge-domains> {
												<domain> {
													<name> $ZTP_BD;
													expr jcs:progress( "ZTP-SCRIPT: adding NNI: " _ ../value _ "." _ $ztp_oam_vlan);
													<interface> {
														 <name> ../value _ "." _ $ztp_oam_vlan;
													}
												}
											}
										}
/*										expr jcs:progress( "ZTP-SCRIPT: Adding interfaces to VSI/BD: " _ $ZTP_VSI_BOOT _ "/" _ $ZTP_BD_BOOT);
										<instance> {
											<name> $ZTP_VSI_BOOT;
											<bridge-domains> {
												<domain> {									
													<name> $ZTP_BD_BOOT;
													expr jcs:progress( "ZTP-SCRIPT: adding NNI: " _ ../value _ "." _ $ztp_boot_vlan);
													<interface> {
														<name> ../value _ "." _ $ztp_boot_vlan;
													}	
												}
											}
										}						
*/									}
									expr jcs:progress( "ZTP-SCRIPT: Adding NNI interfaces to protocols LLDP/OSPF/RSVP/MPLS: ");
									<protocols> {
										<ospf> {
											<area> {
												<name> $ospf_area;
												expr jcs:progress( "ZTP-SCRIPT: Addining to ospf area NNI: " _ ../value _ ".0");
												<interface> {
													<name> ../value _ ".0";
												}										
											}
										}
										<lldp> {
											expr jcs:progress( "ZTP-SCRIPT: Addining to lldp area NNI: " _ ../value);
											<interface> {
												<name> ../value;
											}
										}
										<mpls> {
											expr jcs:progress( "ZTP-SCRIPT: Addining to mpls area NNI: " _ ../value _ ".0");
											<interface> {
												<name> ../value _ ".0";
											}
										}
										<rsvp> {
											expr jcs:progress( "ZTP-SCRIPT: Addining to rsvp area NNI: " _ ../value _ ".0");
											<interface> {
												<name> ../value _ ".0";
											}
										}
            						}
								}
							}
						}
					} else {
						expr jcs:progress( "ZTP-SCRIPT: Skip creating/adding NNIs for macro " _ $macro_name);
					}
                    /* REMOVE NNI INTERFACES FROM OSPF GROUP IF REQUIRED */	
					if ($results) {
						if ($ospf_config/protocols/ospf/area[name=$ospf_area]) {
							for-each($ospf_config/protocols/ospf/area[name=$ospf_area]/interface/name) {
								set $nni_device = ../name;
								if (contains($nni_device,".0")){
									set $nni_exists = false();
								} else {
									set $nni_exists = true();
								}
								for-each($got_copy/groups[name=$ZTP_GROUP_AGN _ $lo0_prefix]/apply-macro[name=$macro_name]/data/value) {
									if (($nni_device!=../value _ ".0") and (not ($nni_exists))) {
										set $nni_exists = false();
									} else {
										set $nni_exists = true();
									}
								}
								
								if ( not ($nni_exists)){
									expr jcs:progress( "ZTP-SCRIPT: Removing NNI: " _ $nni_device _ " from ospf area " _ $ospf_area );
									<protocols> {
										<ospf> {
											<area> {
												<name> $ospf_area;
												<interface delete="delete"> {
													<name> $nni_device;
												}
											}
										}
									}
									<routing-instances> {
										expr jcs:progress( "ZTP-SCRIPT: Removing NNI: " _ substring-before($nni_device,".0") _ "." _ $ztp_oam_vlan _ " from VPLS instance " _ $ZTP_VSI _ substring-after($macro_name,"AREA_"));
										<instance> {
											<name> $ZTP_VSI _ substring-after($macro_name,"AREA_");
											<bridge-domains> {
												<domain> {
													<name> $ZTP_BD;
													<interface delete="delete"> {
														<name> substring-before($nni_device,".0") _ "." _ $ztp_oam_vlan;
													}
												}
											}
										}
									}
								
									/* CHECK IF INTERFACE WAS MOVED TO DIFFERENT OSPF AREA */
									for-each($got_copy/groups[name=$ZTP_GROUP_AGN _ $lo0_prefix]/apply-macro/data/value) {
										if (($nni_device!=../value _ ".0") and (not ($nni_exists))) {
											set $nni_exists = false();
										} else {
											set $nni_exists = true();
										}
									}
									if ( not ($nni_exists)){
										expr jcs:progress( "ZTP-SCRIPT: Removing NNI: " _ $nni_device _ " from mpls, rsvp, lldp ");
										<protocols> {
											<mpls> {
												<interface delete="delete"> {
													<name> $nni_device;
												}
											}
											<rsvp> {
												<interface delete="delete"> {
													<name> $nni_device;
												}
											}
											<lldp> {
												<interface delete="delete"> {
													<name> substring-before($nni_device,".0");
												}
											}
										}
/*										<routing-instances> {
											expr jcs:progress( "ZTP-SCRIPT: Removing NNI: " _ substring-before($nni_device,".0") _ "." _ $ztp_boot_vlan _ " from VPLS instance " _ $ZTP_VSI_BOOT);
											<instance> {
												<name> $ZTP_VSI_BOOT;
												<bridge-domains> {
													<domain> {
														<name> $ZTP_BD_BOOT;
															<interface delete="delete"> {
															<name> substring-before($nni_device,".0") _ "." _ $ztp_boot_vlan;
														}
													}
												}
											}
										}
*/										<interfaces> {
											expr jcs:progress( "ZTP-SCRIPT: Removing from router configuration NNI: " _ substring-before($nni_device,".0"));
											<interface delete="delete"> {
												<name> substring-before($nni_device,".0");
											}
										}
                                    }	
								}
							}
						}
						expr jcs:progress( "ZTP-SCRIPT: OSPF area " _ $ospf_area _ " CONFIGURATION WAS COMPLITED: ");
					} else {
						expr jcs:progress( "ZTP-SCRIPT: OSPF area " _ $ospf_area _ " CONFIGURATION WAS SKIP: ");
					}
				}
		    } /* End of  Configuration Update */
		} 
	} 
	/* Create configuration with static IP */
	if ($ztp_result) {
		var $options := {
			 <commit-options> {
				<full>;
				<synchronize>;
				<force-synchronize>;
				<log> "Commiting ZTP configuration for AGN node"; 
			}
		}

		var $commit_results := { call jcs:load-configuration( $action="merge", $commit-options=$options, $configuration=$change, $connection = $jnx ); } 
		 expr jcs:progress( "ZTP-SCRIPT: " _ $commit_results ); 
		if ($commit_results//xnm:warning) {
			for-each ($commit_results//xnm:warning) {
				expr jcs:progress( "ZTP-SCRIPT: commit warning: " _ message );
			}
		}
		if ($commit_results//xnm:error) {
			for-each ($commit_results//xnm:error) {
				expr jcs:progress( "ZTP-SCRIPT: commit error: " _ message );
			}
			expr jcs:progress( "ZTP-SCRIPT: Script failed." );
			expr jcs:progress( "ZTP-SCRIPT: Rollback(" _ $nRollback _ ") to previous configuration." );
			var $rollback_options := {
				<commit-options> {
					<full>;
					<synchronize>;
					<force-synchronize>;
					<log> "Rollback to previous ZTP config"; 
				}
			}
			var $rollback_configuration := { call jcs:load-configuration( $commit-options = $rollback_options, $rollback = $nRollback, $connection = $jnx ); } 
			var $die = ztp_script:terminate();
		} else {
			expr jcs:progress( "ZTP-SCRIPT: ZTP CONFIGURATION ON AGN " _ $lo0_prefix _ " UPDATED SUCCESSFULY");
			/* var $update_ver = ztp_script:update_ztp_version($ztp_current_version); */
			set $nRollback = $nRollback + 1;
			
		}
    } else {
		expr jcs:progress( "ZTP-SCRIPT: No configuration changes was made." );
		expr jcs:progress( "ZTP-SCRIPT: Rollback(" _ $nRollback _ ") to previous configuration." );
		var $rollback_options := {
			<commit-options> {
				<full>;
				<synchronize>;
				<force-synchronize>;
				<log> "Rollback to previous ZTP config"; 
			}
		}
		var $rollback_configuration := { call jcs:load-configuration( $commit-options = $rollback_options, $rollback = $nRollback, $connection = $jnx ); } 
	}		
	var $die = ztp_script:terminate();
}
/* ------------------------------------------------------------------ */
/* CHECK IF VLAN IS ASSIGNED TO ANY OF THE GIVEN INTERFACE UNIT       */
/* ------------------------------------------------------------------ */
function ztp_script:element_exists_vlan($ifd, $vlan-id ) {
	/* geting ospf configuration */
    var $get =  <get-configuration> {
                    <configuration> {
                        <interfaces> {
							<interface> $ifd;
						}
					}
				}
	var $got = jcs:execute( $jnx, $get );
	mvar $bul_value = false();
	if (not (ztp_script:element_exists_ifd($ifd)))	{
	   set $bul_value = false();
	} else {
		for-each($got/interfaces/interface/unit/vlan-id) {
			if ((../vlan-id!=$vlan-id) and (not($bul_value))) {
				set $bul_value =  false();
			} else {
				set $bul_value =  true();
			}
		}
	}
	result $bul_value;
}
/* ------------------------------------------------------------------ */
/* CHECK IF IFD EXISTS                                                */
/* ------------------------------------------------------------------ */
function ztp_script:element_exists_ifd($ifd) {
	/* geting ospf configuration */
    var $get =  <get-configuration> {
                    <configuration> {
                        <interfaces> {
							<interface> $ifd;
						}
					}
				}
	var $got = jcs:execute( $jnx, $get );
	mvar $element_exists = true();
	var $check_ifd = {
		if ($got//name) {
		 expr $got//name;
		} else {
			expr "";
		}
	}
	if ($check_ifd==$ifd)	{
	   set $element_exists = true();
	} else {
	   set $element_exists = false();
	}
	result $element_exists;
}
/* ------------------------------------------------------------------ */
/* CHECK IF UNIT EXIST FOR GIVEN IFD                                  */
/* ------------------------------------------------------------------ */
function ztp_script:element_exists_unit($ifd, $unit ) {
	/* geting ospf configuration */
    var $get =  <get-configuration> {
                    <configuration> {
                        <interfaces> {
							<interface> $ifd;
						}
					}
				}
	var $got = jcs:execute( $jnx, $get );
	mvar $element_exists = true();
	var $check_unit = {
		if ($got/interfaces/interface/unit[name=$unit]) {
		    expr $got/interfaces/interface/unit[name=$unit];
		} else {
			expr "";
		}
	}

	if ($check_unit==$unit) {
		set $element_exists = true();
	} else {
		set $element_exists = false();
	}

	result $element_exists;
}
/* ------------------------------------------------------------------ */
/* CHECK IF route destinguished already exist in configuration         */
/* ------------------------------------------------------------------ */
function ztp_script:element_exists_rd($rd) {
	/* geting ospf configuration */
    var $get =  <get-configuration> {
                    <configuration> {
                        <routing-instances>;
					}
				}
	var $got = jcs:execute( $jnx, $get );
	mvar $element_exists = false();	
	for-each($got/routing-instances/instance/route-distinguisher/rd-type){
		if ((../rd-type!=$rd) and (not($element_exists))) {
			set $element_exists = false();
		} else {
			set $element_exists = true();
		}			
	}
	result $element_exists;
}

/* ------------------------------------------------------------------ */
/* GET SERIAL NUMBER */
/* ------------------------------------------------------------------ */
function ztp_script:get_serial_number() {
     expr jcs:progress( "ZTP-SCRIPT: Getting box Serial Number" );
     expr jcs:syslog( $SYSLOG, $APPNAME _ ": Getting box Serial Number" );
     /* get our serial number */
    var $chassis_hardware := jcs:execute( $jnx, 'get-chassis-inventory' );
    var $serial_no = $chassis_hardware/chassis/serial-number;
    expr jcs:progress( "ZTP-SCRIPT: serial no = " _ $serial_no );
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": serial no = " _ $serial_no );
	result $serial_no;
}
/* ------------------------------------------------------------------ */
/* GET LOCAL ROUTER ID */
/* ------------------------------------------------------------------ */
function ztp_script:get_router_id() {
    expr jcs:progress( "ZTP-SCRIPT: Getting box Router ID" );
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": Getting box Router ID" );
    /* get our serial number */
    var $router_sum_info := jcs:execute( $jnx, 'get-route-summary-information' );
    var $router_id = {
		if ( $router_sum_info/router-id ) {
			expr $router_sum_info/router-id;
		} else {
			expr false();
		}
	}
	result $router_id;
}
/* ------------------------------------------------------------------ */
/* GET LOCAL ROUTER AS */
/* ------------------------------------------------------------------ */
function ztp_script:get_as_number() {
    expr jcs:progress( "ZTP-SCRIPT: Getting AS Number" );
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": Getting box Router ID" );
    /* get our serial number */
    var $router_sum_info := jcs:execute( $jnx, 'get-route-summary-information' );
    var $as_number = {
		if ( $router_sum_info/as-number ) {
			expr $router_sum_info/as-number;
		} else {
			expr false();
		}
	}
	result $as_number;
}
/* ------------------------------------------------------------------ */
/*   LOAD CONFIGURATION FROM FILE */
/* ------------------------------------------------------------------ */
function ztp_script:load_config($config_url, $action = "merge", $commit_option = true() ) {
	mvar $load_config = true();
	mvar $commit_success = false();
    var $phrase1 = {
		if ($action == "merge") {
			expr "merged to ";
		} else {
			if ($action == "replace") {
				expr " and replace ";
			} else {
				expr " be merged (default action) to existed configuration";
			}
		}
	}
	var $phrase2 = {
		if ($commit_option) {
			expr "and commited ";
		} else {
			expr "(but not commited) ";
		}
	}
	var $new_action = {
		if (($action == "merge") or ($action == "replace")) {
			expr $action;
		} else {
            expr "merge";
		}
	}
    expr jcs:progress( "Config file: " _ $config_url _ " will be loaded and " _ $phrase1 _ $phrase2 _ "existed configuration" );
    /* lock the config */
    var $lock = <lock-configuration>;
    var $did_lock = jcs:execute( $jnx, $lock );
    if ( $did_lock//self::xnm:error ) {
        expr jcs:syslog( $SYSLOG, $APPNAME _ ": ERROR: unable to lock config" );
        expr jcs:progress( "ERROR: unable to lock config" );
        set $load_config = false();
    } else {
        expr jcs:progress( "Got config lock" );
    }
    if ($load_config) {
		expr jcs:progress( "Processing config url " _ $config_url );
		expr jcs:syslog( $SYSLOG, $APPNAME _ ": Processing config url " _ $config_url );
		/* load in new config */
		var $do_load = <load-configuration action="merge" url=$config_url format="text">;
		var $did_load = jcs:execute( $jnx, $do_load );
		if( not( $did_load/load-success )) {
			expr jcs:syslog( $SYSLOG, $APPNAME _ ": ERROR: unable to load config " _ $config_url );
			expr jcs:progress( "ERROR: unable to load config " _ $config_url );
			set $load_config = false();
		} 
		if ($load_config) {
			expr jcs:progress( "CONFIG LOAD SUCCESS" );
			var $commit = {
				if ($commit_option) {		
				    <commit-configuration> {
						<full>;
						<synchronize>;
						<force-synchronize>;
						<log> "Initial config load";
					}
				} else {
					<commit-configuration> {
						<check>;
						<synchronize>;
						<force-synchronize>;
						<log> "Initial config load";
					}
				}
			}
			var $did_commit = jcs:execute( $jnx, $commit );
			if ( $did_commit//self::xnm:error )  {
				expr jcs:progress( "CONFIG COMMIT FAILED" );
				expr jcs:syslog( $SYSLOG, $APPNAME _ ": CONFIG COMMIT FAILED" );
				set $load_config = false();
			} else {
				set $load_config = true();
				expr jcs:progress( "CONFIG COMMIT SUCCESS" );
				expr jcs:syslog( $SYSLOG, $APPNAME _ ": CONFIG COMMIT SUCCESS" );
			}
		} 
		var $unlock = <unlock-configuration>;
		var $did_unlock = jcs:execute( $jnx, $unlock );
		expr jcs:progress( "release config lock" );
		result $load_config;
    } else {  /* we failed to lock the config */
		result $load_config;
	} /* end of foreach config_url */
}
/* ------------------------------------------------------------------ */
/* FUNCTION VERIVIES IF THERE IS A VALID MACROS FOR THE PLATFORM      */
/* ------------------------------------------------------------------ */
function ztp_script:ztp_grp_exists($group_name, $macro_name = "N/A", $serial_no = "N/A") {
	var $get_grp = <get-configuration> {
         <configuration> {
            <groups> {
				<name>;
			}
	    }
    }
	/* geting variables from apply-macro */
	var $got_grp = jcs:execute( $jnx, $get_grp );
	mvar $grp_flag = "skip";
	for-each ($got_grp/groups/name) {
		set $grp_flag = {
			if  ((../name!=$group_name) and ($grp_flag!="exists")) {
			    expr "skip";
			} else {
				expr "exists";
			} /* End if */
		}
    }
	/* Verification for the apply-macro */	
    if ($grp_flag != "exists") {
		expr jcs:progress( "ZTP-SCRIPT: Can't find a group " _ $group_name);
        result false();
	} else {
		expr jcs:progress( "ZTP-SCRIPT: Found a group " _ $group_name);
		if ( $macro_name!="N/A") {
	        expr jcs:progress( "ZTP-SCRIPT: Looking for apply-macro " _ $macro_name _ " in group " _ $group_name );
	        /* Look for apply-macro with specified name */
	        var $get_mcr = <get-configuration> {
                <configuration> {
                    <groups> {
				        <name> $group_name;
			        }
	            }
            }
	        /* geting variables from apply-macro */
	        var $got_mcr = jcs:execute( $jnx, $get_mcr );
	        mvar $mcr_flag = "skip";
	        for-each ($got_mcr/groups[name=$group_name]/apply-macro/name) {
		        set $mcr_flag = {
			        if  ((../name!=$macro_name) and ($mcr_flag!="exists")) {
			            expr "skip";
			        } else {
				        expr "exists";
			        } /* End if */
		        }
            }
	        /* Verification for the group */	
            if ($mcr_flag != "exists") {
		        expr jcs:progress( "ZTP-SCRIPT: Can't find apply-macro " _ $macro_name );
		        result false();
	        } else {
		        expr jcs:progress( "ZTP-SCRIPT: Found apply-macro " _ $macro_name );
			    result true();
	        }		
	    } else {
			result true();
		}
	}	
}	
/* ------------------------------------------------------------------ */
/* Helper routines
/* ------------------------------------------------------------------ */
function ztp_script:file-copy( $source, $filename, $destination ) {
	var $copy_get = <file-copy> {
        <source> $source _ "/" _ $filename;
        <destination> $destination _ "/" _ $filename;
        <staging-directory> $TMPDIR;
    }
    var $copy_got = jcs:execute( $jnx, $copy_get );
	if ( contains($copy_got,"failed")) {
		result false();
	} else {
        result true();
	}
}
function ztp_script:file-exists( $filename ) {
    var $ls_file = <file-list> { <path> $filename; }
    var $ls_got = jcs:execute( $jnx, $ls_file );
    var $retval = boolean( $ls_got//file-information );
    result $retval;
}
function ztp_script:file-delete( $filename ) {
    var $do_rm = <file-delete> { <path> $filename; }
    var $did_rm = jcs:execute( $jnx, $do_rm );
    /* @@@ trap error */
    result true();
}
function ztp_script:only_once() {
    if( ztp_script:file-exists( $ZTP_LOCKFILE )) {
        result true();
    } else {
        var $do_lock = <file-put> {
             <filename> $ZTP_LOCKFILE;
             <encoding> 'ascii';
             <file-contents> 'locked';
        }
    var $did_lock = jcs:execute( $jnx, $do_lock );
    result false();
    }
}
function ztp_script:terminate() {
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": SCRIPT-TERMINATE" );
    var $rm_lock = ztp_script:file-delete( $ZTP_LOCKFILE );
    terminate;
}
function ztp_script:get_ztp_version($ztp_filename) {
	mvar $version = " ";
	var $version_str := { call jcs:grep($filename = $ztp_filename , $pattern = $ZTP_VERSION); }
	for-each ($version_str//input) {
		/*expr jcs:progress( "ZTP-SCRIPT: Found old version: " _ .); */
		set $version = substring-before(substring-after(.,$VERSION_PREFIX),';');
	}
	set $version = $version + 0;
	if (not ($version)) {
        result false();
	} else {
	    result $version;
	}
} 
function ztp_script:update_ztp_version($ztp_version) {
    if (ztp_script:file-exists( $ZTP_VERSION_FILE )){
		var $rm_ver = ztp_script:file-delete( $ZTP_VERSION_FILE );
	}
    var $update_ver = <file-put> {
        <filename> $ZTP_VERSION_FILE;
        <encoding> 'ascii';
        <file-contents> $VERSION _ $ztp_version;
    }
    var $did_update_ver = jcs:execute( $jnx, $update_ver );
}