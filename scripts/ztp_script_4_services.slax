version 1.1;
/* ------------------------------------------------------------------ */
/* This program performs Zero touch provisioning for the ACX platform */
/* It will set up OAM VLAN and Bridge Domain to allow permanent       */
/* management access to the box.  */
/* */
/* Version 1.0 Vasily Mukhin vmukhin@juniper.net */
/* Based on jctyztp script by Jeremy Schulman and Brian Sherwood */
/* */
/* ------------------------------------------------------------------ */
/* ------------------------------------------------------------------ */
/* XML namespaces */
/* ------------------------------------------------------------------ */
/* Juniper */
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns exsl extension = "http://exslt.org/common";
/* EXSLT */
ns str extension = "http://exslt.org/strings";
/* private namespace for this script */
ns ztp_script = "http://xml.juniper.com/ztp_script/1.0";
import '../import/junos.xsl';
/* ------------------------------------------------------------------ */
/* Script parameters */
/* ------------------------------------------------------------------ */
/* param $server = '10.253.43.29'; */
/* ------------------------------------------------------------------ */
/* Constants */
/* ------------------------------------------------------------------ */
var $APPNAME = 'ztp_script[' _ $junos-context/pid _ ']';
var $SYSLOG = 'user.info';
var $TMPDIR = '/var/tmp';
var $CODEDIR = '/var/tmp';
var $ZTP_GROUP_NAME = "GR-ZTP";
var $ZTP_GROUP_PLATFORM = "GR-ZTP-PLATFORM";
var $ZTP_GROUP_BOX = "GR-ZTP-BOX";
var $ZTP_GROUP_TRANSPORT = "GR-ZTP-TRANSPORT";
var $ZTP_GROUP_SVC = "GR-ZTP-SERVICES";
var $ZTP_GROUP_STAGE_0 = "GR-ZTP-STAGE-0";
var $ZTP_GROUP_STAGE_1 = "GR-ZTP-STAGE-1";
var $ZTP_GROUP_STAGE_2 = "GR-ZTP-STAGE-2";
var $ZTP_GROUP_STAGE_4 = "GR-ZTP-STAGE-4";
var $ZTP_CODE_MACRO_NAME = "CODE";
var $ZTP_CONFIG_MACRO_NAME = "CONFIG";
var $ZTP_CONFIG = "CONFIG";
var $ZTP_LOCKFILE = '/tmp/ztp_script.lock';
/* ------------------------------------------------------------------ */
/* Global variables */
/* ------------------------------------------------------------------ */
var $jnx = jcs:open();
/* ------------------------------------------------------------------ */
/* MAIN */
/* ------------------------------------------------------------------ */
match / {
    if( not( $jnx )) {
        expr jcs:syslog( $SYSLOG, $APPNAME _ ": ERROR: unable to connect to Junos API");
        expr jcs:progress( "ERROR: unable to connect to Junos API");
        expr jcs:output( $APPNAME _ ":ERROR: unable to connect to Junos API");
        terminate;
    }
    var $running = ztp_script:only_once();
    if( $running ) {
        expr jcs:syslog( $SYSLOG, $APPNAME _ ": process already running, backing off" );
        expr jcs:progress( "process already running, backing off" );
        expr jcs:output( $APPNAME _ ": process already running, backing off" );
        terminate;
    }
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": SCRIPT-BEGIN" );
    expr jcs:progress( "SCRIPT-BEGIN" );
    /*----------------------------------------------------------------*/
    /*      STAGE#4: LOAD NODE SPECIFIC CONFIGURATION FOR SERVICES    */
	/*----------------------------------------------------------------*/
	/* Check if configuration for the next ZTP STAGE exists */
	if ( not( ztp_script:ztp_grp_exists($ZTP_GROUP_SVC, $ZTP_CONFIG_MACRO_NAME) ) ) {
	expr jcs:progress( "ZTP-SCRIPT: No configuration for the next ZTP phase exists. Stop at this point" );
	var $die = ztp_script:terminate();
	}
	var $get = <get-configuration> {
         <configuration> {
            <groups> {
               <name> $ZTP_GROUP_SVC;
            }
        }
    }
	var $got = jcs:execute( $jnx, $get );
	var $got_copy = $got;

	var $ztp_config_src = $got/groups[name=$ZTP_GROUP_SVC]/apply-macro[name=$ZTP_CONFIG_MACRO_NAME]/data[name=$ZTP_CONFIG]/value;	
    var $serial_no = ztp_script:get_serial_number();
	var $ztp_svc_config = $ztp_config_src _ "/" _ $serial_no _ "_services.conf";

	/*-------------------------------------------------------*/
	/*  LOAD NEW ZTP PARAMETERS                              */
    /*-------------------------------------------------------*/
	mvar $success = "";
    if (not (ztp_script:load_config($ztp_svc_config))) {
        expr jcs:progress( "ZTP-SCRIPT: SCRIPT FAILED TO UPDATE ZTP CONFIG. CONFIG FILE NOT FOUND OR BAD CONFIGURATION");
		set $success = " WITHOUT INSTALLING SERVICE CONFIGURATION";
    } else {
        expr jcs:progress( "ZTP-SCRIPT: ZTP CONFIG FO SERVICES SUCCESSFULLY UPDATED" );
		set $success = " SUCCESSFULLY";
	}
	expr jcs:progress( "ZTP-SCRIPT: Sleep for 5 sec." );
	expr jcs:sleep(5);
	
    /*----------------------------------------------------------------*/
    /*      DISABLING SCRIPT FOR STAGE#4                                   */
	/*----------------------------------------------------------------*/
    /* Disabling configuration for stage 4 */	
	var $options_s4 := {
        <commit-options> {
            <log> "Disable ZTP Stage 4"; 
        }
	}
    var $change_s4 = {
        <configuration> {
            <apply-groups delete = "delete"> $ZTP_GROUP_STAGE_4;
        }
    }
    /* Load configuration */	
    var $results_stage_4 := { call jcs:load-configuration( $action="merge", $commit-options=$options_s4, $configuration=$change_s4, $connection = $jnx ); }
    if ($results_stage_4//xnm:warning) {
        for-each ($results_stage_4//xnm:warning) {
	        expr jcs:progress( "ZTP-SCRIPT: commit warning: " _ message );
        }
    }
	if ($results_stage_4//xnm:error) {
        for-each ($results_stage_4//xnm:error) {
            expr jcs:progress( "ZTP-SCRIPT: commit error: " _ message );
        }
	    expr jcs:progress( "ZTP-SCRIPT: Script failed." );
		var $die = ztp_script:terminate();
    } else {
        expr jcs:progress( "ZTP-SCRIPT: ZTP PHASE 4 COMPLITED " _ $success );
	} 
    var $die = ztp_script:terminate();
}
/* ------------------------------------------------------------------ */
/* GET SERIAL NUMBER */
/* ------------------------------------------------------------------ */
function ztp_script:get_serial_number() {
     expr jcs:progress( "ZTP-SCRIPT: Getting box Serial Number" );
     expr jcs:syslog( $SYSLOG, $APPNAME _ ": Getting box Serial Number" );
     /* get our serial number */
    var $chassis_hardware := jcs:execute( $jnx, 'get-chassis-inventory' );
    var $serial_no = $chassis_hardware/chassis/serial-number;
    expr jcs:progress( "ZTP-SCRIPT: serial no = " _ $serial_no );
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": serial no = " _ $serial_no );
	result $serial_no;
}
/* ------------------------------------------------------------------ */
/*   LOAD CONFIGURATION FROM FILE */
/* ------------------------------------------------------------------ */
/* ------------------------------------------------------------------ */
/*   LOAD CONFIGURATION FROM FILE */
/* ------------------------------------------------------------------ */
function ztp_script:load_config($config_url, $action = "merge", $commit_option = true() ) {
	mvar $load_config = true();
	mvar $commit_success = false();
    var $phrase1 = {
		if ($action == "merge") {
			expr "merged to ";
		} else {
			if ($action == "replace") {
				expr " and replace ";
			} else {
				expr " be merged (default action) to existed configuration";
			}
		}
	}
	var $phrase2 = {
		if ($commit_option) {
			expr "and commited ";
		} else {
			expr "(but not commited) ";
		}
	}
	var $new_action = {
		if (($action == "merge") or ($action == "replace")) {
			expr $action;
		} else {
            expr "merge";
		}
	}
    expr jcs:progress( "Config file: " _ $config_url _ " will be loaded and " _ $phrase1 _ $phrase2 _ "existed configuration" );
    /* lock the config */
    var $lock = <lock-configuration>;
    var $did_lock = jcs:execute( $jnx, $lock );
    if ( $did_lock//self::xnm:error ) {
        expr jcs:syslog( $SYSLOG, $APPNAME _ ": ERROR: unable to lock config" );
        expr jcs:progress( "ERROR: unable to lock config" );
        set $load_config = false();
    } else {
        expr jcs:progress( "Got config lock" );
    }
    if ($load_config) {
		expr jcs:progress( "Processing config url " _ $config_url );
		expr jcs:syslog( $SYSLOG, $APPNAME _ ": Processing config url " _ $config_url );
		/* load in new config */
		var $do_load = <load-configuration action="merge" url=$config_url format="text">;
		var $did_load = jcs:execute( $jnx, $do_load );
		if( not( $did_load/load-success )) {
			expr jcs:syslog( $SYSLOG, $APPNAME _ ": ERROR: unable to load config " _ $config_url );
			expr jcs:progress( "ERROR: unable to load config " _ $config_url );
			set $load_config = false();
		} 
		if ($load_config) {
			expr jcs:progress( "CONFIG LOAD SUCCESS" );
			var $commit = {
				if ($commit_option) {		
				    <commit-configuration> {
						<full>;
						<synchronize>;
						<force-synchronize>;
						<log> "Initial config load";
					}
				} else {
					<commit-configuration> {
						<check>;
						<synchronize>;
						<force-synchronize>;
						<log> "Initial config load";
					}
				}
			}
			var $did_commit = jcs:execute( $jnx, $commit );
			if ( $did_commit//self::xnm:error )  {
				expr jcs:progress( "CONFIG COMMIT FAILED" );
				expr jcs:syslog( $SYSLOG, $APPNAME _ ": CONFIG COMMIT FAILED" );
				set $load_config = false();
			} else {
				set $load_config = true();
				expr jcs:progress( "CONFIG COMMIT SUCCESS" );
				expr jcs:syslog( $SYSLOG, $APPNAME _ ": CONFIG COMMIT SUCCESS" );
			}
		} 
		var $unlock = <unlock-configuration>;
		var $did_unlock = jcs:execute( $jnx, $unlock );
		expr jcs:progress( "release config lock" );
		result $load_config;
    } else {  /* we failed to lock the config */
		result $load_config;
	} /* end of foreach config_url */
}
/* ------------------------------------------------------------------ */
/* Helper routines
/* ------------------------------------------------------------------ */
function ztp_script:file-exists( $filename ) {
    var $ls_file = <file-list> { <path> $filename; }
    var $ls_got = jcs:execute( $jnx, $ls_file );
    var $retval = boolean( $ls_got//file-information );
    result $retval;
}
function ztp_script:file-delete( $filename ) {
    var $do_rm = <file-delete> { <path> $filename; }
    var $did_rm = jcs:execute( $jnx, $do_rm );
    /* @@@ trap error */
    result true();
}
function ztp_script:only_once() {
    if( ztp_script:file-exists( $ZTP_LOCKFILE )) {
        result true();
    } else {
        var $do_lock = <file-put> {
             <filename> $ZTP_LOCKFILE;
             <encoding> 'ascii';
             <file-contents> 'locked';
        }
    var $did_lock = jcs:execute( $jnx, $do_lock );
    result false();
    }
}
function ztp_script:terminate() {
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": SCRIPT-TERMINATE" );
    var $rm_lock = ztp_script:file-delete( $ZTP_LOCKFILE );
    terminate;
}
/* ------------------------------------------------------------------ */
/* FUNCTION VERIVIES IF THERE IS A VALID MACRO FOR THE PLATFORM      */
/* ------------------------------------------------------------------ */
function ztp_script:ztp_grp_exists($group_name, $macro_name = "N/A", $serial_no = "N/A") {
	var $get_grp = <get-configuration> {
         <configuration> {
            <groups> {
				<name>;
			}
	    }
    }
	/* geting variables from apply-macro */
	var $got_grp = jcs:execute( $jnx, $get_grp );
	mvar $grp_flag = "skip";
	for-each ($got_grp/groups/name) {
		set $grp_flag = {
			if  ((../name!=$group_name) and ($grp_flag!="exists")) {
			    expr "skip";
			} else {
				expr "exists";
			} /* End if */
		}
    }
	/* Verification for the apply-macro */	
    if ($grp_flag != "exists") {
		expr jcs:progress( "ZTP-SCRIPT: Can't find a group " _ $group_name);
        result false();
	} else {
		expr jcs:progress( "ZTP-SCRIPT: Found a group " _ $group_name);
		if ( $macro_name!="N/A") {
	        expr jcs:progress( "ZTP-SCRIPT: Looking for apply-macro " _ $macro_name _ " in group " _ $group_name );
	        /* Look for apply-macro with specified name */
	        var $get_mcr = <get-configuration> {
                <configuration> {
                    <groups> {
				        <name> $group_name;
			        }
	            }
            }
	        /* geting variables from apply-macro */
	        var $got_mcr = jcs:execute( $jnx, $get_mcr );
	        mvar $mcr_flag = "skip";
	        for-each ($got_mcr/groups[name=$group_name]/apply-macro/name) {
		        set $mcr_flag = {
			        if  ((../name!=$macro_name) and ($mcr_flag!="exists")) {
			            expr "skip";
			        } else {
				        expr "exists";
			        } /* End if */
		        }
            }
	        /* Verification for the group */	
            if ($mcr_flag != "exists") {
		        expr jcs:progress( "ZTP-SCRIPT: Can't find apply-macro " _ $macro_name );
		        result false();
	        } else {
		        expr jcs:progress( "ZTP-SCRIPT: Found apply-macro " _ $macro_name );
			    result true();
	        }		
	    } else {
			result true();
		}
	}	
}	