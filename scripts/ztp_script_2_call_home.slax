version 1.1;
/* ------------------------------------------------------------------ */
/* This program performs Zero touch provisioning for the ACX platform */
/* It will set up OAM VLAN and Bridge Domain to allow permanent       */
/* management access to the box.  */
/* */
/* Version 1.0 Vasily Mukhin vmukhin@juniper.net */
/* Based on jctyztp script by Jeremy Schulman and Brian Sherwood */
/* */
/* ------------------------------------------------------------------ */
/* ------------------------------------------------------------------ */
/* XML namespaces */
/* ------------------------------------------------------------------ */
/* Juniper */
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns exsl extension = "http://exslt.org/common";
/* EXSLT */
ns str extension = "http://exslt.org/strings";
/* private namespace for this script */
ns ztp_script = "http://xml.juniper.com/ztp_script/1.0";
import '../import/junos.xsl';
/* ------------------------------------------------------------------ */
/* Script parameters */
/* ------------------------------------------------------------------ */
/* param $server = '10.253.43.29'; */
/* ------------------------------------------------------------------ */
/* Constants */
/* ------------------------------------------------------------------ */
var $APPNAME = 'ztp_script[' _ $junos-context/pid _ ']';
var $SYSLOG = 'user.info';
var $TMPDIR = '/var/tmp';
var $CODEDIR = '/var/tmp';
var $ZTP_GROUP_PLATFORM = "GR-ZTP-PLATFORM";
var $ZTP_GROUP_BOX = "GR-ZTP-BOX";
var $ZTP_GROUP_CALLHOME = "GR-ZTP-CALLHOME";
var $ZTP_CODE_MACRO_NAME = "CODE";
var $ZTP_CONFIG_MACRO_NAME = "CONFIG";
var $ZTP_CALLHOME_MACRO_NAME = "CALLHOME";
var $ZTP_MACRO_NAME_PREFIX = "ZTP-";
var $ZTP_BD_OAM = "BD-ZTP-OAM";
var $ZTP_OAM_VLAN = "OAM_VLAN";
var $ZTP_LOOPBACK = "Lo0";
var $ZTP_CONFIG = "CONFIG";
var $ZTP_GROUP_STAGE_1 = "GR-ZTP-STAGE-1";
var $ZTP_GROUP_STAGE_2 = "GR-ZTP-STAGE-2";
var $ZTP_GROUP_STAGE_3 = "GR-ZTP-STAGE-3";
var $ZTP_GROUP_SPACE = "GR-ZTP-SPACE";
var $ZTP_LOCKFILE = '/tmp/ztp_script.lock';
var $PATTERN = "system";
var $ZTP_GROUP_NNI_TAG = "GR-NNI-TAG";
/* ------------------------------------------------------------------ */
/* Global variables */
/* ------------------------------------------------------------------ */
var $jnx = jcs:open();
/* ------------------------------------------------------------------ */
/* MAIN */
/* ------------------------------------------------------------------ */
match / {
    if( not( $jnx )) {
        expr jcs:syslog( $SYSLOG, $APPNAME _ ": ERROR: unable to connect to Junos API");
        expr jcs:progress( "ZTP-SCRIPT: ERROR: unable to connect to Junos API");
        expr jcs:output( $APPNAME _ ":ERROR: unable to connect to Junos API");
        terminate;
    }
    var $running = ztp_script:only_once();
    if( $running ) {
        expr jcs:syslog( $SYSLOG, $APPNAME _ ": process already running, backing off" );
        expr jcs:progress( "ZTP-SCRIPT: process already running, backing off" );
        expr jcs:output( $APPNAME _ ": process already running, backing off" );
        terminate;
    }
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": SCRIPT-BEGIN" );
    expr jcs:progress( "ZTP-SCRIPT: SCRIPT-BEGIN" );
    /*----------------------------------------------------------------*/
    /*      STAGE#2: GET SPACE CONGIGLET LOCATION                           */
	/*----------------------------------------------------------------*/
	/* Check if configuration for the next ZTP STAGE exists */
	if ( not( ztp_script:ztp_grp_exists($ZTP_GROUP_CALLHOME, $ZTP_CALLHOME_MACRO_NAME) ) ) {
	expr jcs:progress( "ZTP-SCRIPT: No configuration for the next ZTP phase exists. Stop at this point" );
	var $die = ztp_script:terminate();
	}
	var $get = <get-configuration> {
         <configuration> {
            <groups> {
               <name> $ZTP_GROUP_CALLHOME;
            }
        }
    }
	var $got = jcs:execute( $jnx, $get );
	/*-----------------------------------------------------------------*/
	/*  Deactivate STAGE# 2 Configuration                               */
	/*  Activate   STAGE# 3 Configuration if exists.                    */	
	/*     Note:   If SPACE Network Management Platform is in use then */
	/*             STAGE# 3 of ZTP process will be enabled after call   */
	/*             home STAGE  */
	/*-----------------------------------------------------------------*/
	var $options_s2 := {
        <commit-options> {
            <log> "Disables ZTP Stage 2 on complition"; 
        }
	}
    var $change_s2 = {
        <configuration> {
            <apply-groups delete = "delete"> $ZTP_GROUP_STAGE_2;
			if ( ztp_script:ztp_grp_exists($ZTP_GROUP_STAGE_3) ) {
				<apply-groups> $ZTP_GROUP_STAGE_3;
			} else {
				expr jcs:progress( "ZTP-SCRIPT: NEXT ZTP STAGE STAGE WILL BE ENABLED AFTER CALL HOME COMPLITION" );
			}
        }
    }
    /* Loading configuration */	
    var $results_step_3 := { call jcs:load-configuration( $action="merge", $commit-options=$options_s2, $configuration=$change_s2, $connection = $jnx ); }
    if ($results_step_3//xnm:warning) {
        for-each ($results_step_3//xnm:warning) {
	        expr jcs:progress( "ZTP-SCRIPT: apply-group commit warning: " _ message );
        }
    }
	if ($results_step_3//xnm:error) {
        for-each ($results_step_3//xnm:error) {
            expr jcs:progress( "ZTP-SCRIPT: apply-group commit error: " _ message );
        }
	    expr jcs:progress( "ZTP-SCRIPT: Script failed." );
		var $die = ztp_script:terminate();
    } else {
        expr jcs:progress( "ZTP-SCRIPT: ZTP-SCRIPT: ZTP PHASE 2 COMPLITED SUCCESSFULLY" );
	}	
	/* get location of the configlet file */
	var $ztp_config_src = $got/groups[name=$ZTP_GROUP_CALLHOME]/apply-macro[name=$ZTP_CALLHOME_MACRO_NAME]/data[name=$ZTP_CONFIG]/value;	
    /* Download configlet file */     
	var $serial_no = ztp_script:get_serial_number();
	var $ztp_callhome_config = $ztp_config_src _ "/" _ $serial_no _ ".conf";
	/*-----------------------------------------------------------------*/
	/*  LOAD CONFIGURATION FROM CONFIGLET                              */
    /*-----------------------------------------------------------------*/
    if (not (ztp_script:load_config($ztp_callhome_config))) {
        expr jcs:progress( "ZTP-SCRIPT: SCRIPT FAILED TO UPDATE ZTP CONFIG. CONFIG FILE NOT FOUND OR BAD CONFIGURATION");
	    var $die = ztp_script:terminate();	
    } else {
        expr jcs:progress( "ZTP-SCRIPT: CALL HOME CONFIGURATION LOADED" );
	}
	expr jcs:syslog( $SYSLOG, $APPNAME _ ": Stage 2 completed successfully" );
	expr jcs:syslog( $SYSLOG, $APPNAME _ ": Now calling home to continue ZTP process" );
    expr jcs:progress( "ZTP-SCRIPT: Stage 2 completed successfully" );
    expr jcs:progress( "ZTP-SCRIPT: Now calling home to continue ZTP process." );
	
/* 	var $delete_file = ztp_script:file-delete($filename); */
	var $die = ztp_script:terminate();	
}
/* ------------------------------------------------------------------ */
/*   LOAD CONFIGURATION FROM FILE */
/* ------------------------------------------------------------------ */
function ztp_script:load_config($config_url, $action = "merge") {
	mvar $load_config = true();
	var $phrase = {
		if ($action == "merge") {
			expr "merged to existed configuration";
		} else {
			if ($action == "replace") {
				expr " and replace existed statements";
			} else {
				expr " be merged (default action) to existed configuration";
			}
		}
	}
	var $new_action = {
		if (($action == "merge") or ($action == "replace")) {
			expr $action;
		} else {
            expr "merge";
		}
	}
    expr jcs:progress( "Config file: " _ $config_url _ " will be loaded and " _ $phrase  );
    /* lock the config */
    var $lock = <lock-configuration>;
    var $did_lock = jcs:execute( $jnx, $lock );
    if ( $did_lock//self::xnm:error ) {
        expr jcs:syslog( $SYSLOG, $APPNAME _ ": ERROR: unable to lock config" );
        expr jcs:progress( "ERROR: unable to lock config" );
        set $load_config = false();
    } else {
        expr jcs:progress( "Got config lock" );
    }
    if ($load_config) {       
	    set $load_config = false();
        expr jcs:progress( "Processing config url " _ $config_url );
        expr jcs:syslog( $SYSLOG, $APPNAME _ ": Processing config url " _ $config_url );
        /* load in new config */
        var $do_load = <load-configuration action="merge" url=$config_url format="text">;
        var $did_load = jcs:execute( $jnx, $do_load );
        if( not( $did_load/load-success )) {
            expr jcs:syslog( $SYSLOG, $APPNAME _ ": ERROR: unable to load config " _ $config_url );
            expr jcs:progress( "ERROR: unable to load config " _ $config_url );
        } else {
            expr jcs:progress( "CONFIG LOAD SUCCESS" );
            var $commit = <commit-configuration> {
                <full>;
                <synchronize>;
                <force-synchronize>;
                <log> "Initial config load";
            }
            var $did_commit = jcs:execute( $jnx, $commit );
            if ( $did_commit//self::xnm:error ) {
                expr jcs:progress( "COMMIT FAILED" );
                expr jcs:syslog( $SYSLOG, $APPNAME _ ": COMMIT FAILED" );
            } else {
                expr jcs:progress( "COMMIT SUCCESS" );
                var $unlock = <unlock-configuration>;
                var $did_unlock = jcs:execute( $jnx, $unlock );
                expr jcs:progress( "release config lock" );
				set $load_config = true();
                /*var $die = ztp_script:terminate();*/
            }
        }
    } /* end of foreach config_url */
	if (not($load_config)) {
		/* if we make it here, we failed to load the config */
        var $unlock = <unlock-configuration>;
        var $did_unlock = jcs:execute( $jnx, $unlock );
        expr jcs:progress( "release config lock" );
	}
    result $load_config;	
}
/* ------------------------------------------------------------------ */
/* FUNCTION VERIFIES IF THERE IS A VALID MACROS FOR THE PLATFORM      */
/* ------------------------------------------------------------------ */
function ztp_script:ztp_grp_exists($group_name, $macro_name = "N/A", $serial_no = "N/A") {
	var $get_grp = <get-configuration> {
         <configuration> {
            <groups> {
				<name>;
			}
	    }
    }
	/* geting variables from apply-macro */
	var $got_grp = jcs:execute( $jnx, $get_grp );
	mvar $grp_flag = "skip";
	for-each ($got_grp/groups/name) {
		set $grp_flag = {
			if  ((../name!=$group_name) and ($grp_flag!="exists")) {
			    expr "skip";
			} else {
				expr "exists";
			} /* End if */
		}
    }
	/* Verification for the apply-macro */	
    if ($grp_flag != "exists") {
		expr jcs:progress( "ZTP-SCRIPT: Can't find a group " _ $group_name);
        result false();
	} else {
		expr jcs:progress( "ZTP-SCRIPT: Found a group " _ $group_name);
		if ( $macro_name!="N/A") {
	        expr jcs:progress( "ZTP-SCRIPT: Looking for apply-macro " _ $macro_name _ " in group " _ $group_name );
	        /* Look for apply-macro with specified name */
	        var $get_mcr = <get-configuration> {
                <configuration> {
                    <groups> {
				        <name> $group_name;
			        }
	            }
            }
	        /* geting variables from apply-macro */
	        var $got_mcr = jcs:execute( $jnx, $get_mcr );
	        mvar $mcr_flag = "skip";
	        for-each ($got_mcr/groups[name=$group_name]/apply-macro/name) {
		        set $mcr_flag = {
			        if  ((../name!=$macro_name) and ($mcr_flag!="exists")) {
			            expr "skip";
			        } else {
				        expr "exists";
			        } /* End if */
		        }
            }
	        /* Verification for the group */	
            if ($mcr_flag != "exists") {
		        expr jcs:progress( "ZTP-SCRIPT: Can't find apply-macro " _ $macro_name );
		        result false();
	        } else {
		        expr jcs:progress( "ZTP-SCRIPT: Found apply-macro " _ $macro_name );
			    result true();
	        }		
	    } else {
			result true();
		}
	}	
}	

/* ------------------------------------------------------------------ */
/* Helper routines
/* ------------------------------------------------------------------ */
function ztp_script:file-copy( $source, $filename, $destination ) {
	var $copy_get = <file-copy> {
        <source> $source _ "/" _ $filename;
        <destination> $destination _ "/" _ $filename;
        <staging-directory> $TMPDIR;
    }
    var $copy_got = jcs:execute( $jnx, $copy_get );
	if ( contains($copy_got,"failed")) {
		result false();
	} else {
        result true();
	}
}
function ztp_script:file-exists( $filename ) {
    var $ls_file = <file-list> { <path> $filename; }
    var $ls_got = jcs:execute( $jnx, $ls_file );
    var $retval = boolean( $ls_got//file-information );
    result $retval;
}
function ztp_script:file-delete( $filename ) {
    var $do_rm = <file-delete> { <path> $filename; }
    var $did_rm = jcs:execute( $jnx, $do_rm );
    /* @@@ trap error */
    result true();
}
function ztp_script:only_once() {
    if( ztp_script:file-exists( $ZTP_LOCKFILE )) {
        result true();
    } else {
        var $do_lock = <file-put> {
             <filename> $ZTP_LOCKFILE;
             <encoding> 'ascii';
             <file-contents> 'locked';
        }
    var $did_lock = jcs:execute( $jnx, $do_lock );
    result false();
    }
}
function ztp_script:terminate() {
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": SCRIPT-TERMINATE" );
    var $rm_lock = ztp_script:file-delete( $ZTP_LOCKFILE );
    terminate;
}
/* ------------------------------------------------------------------ */
/* GET SERIAL NUMBER */
/* ------------------------------------------------------------------ */
function ztp_script:get_serial_number() {
     expr jcs:progress( "ZTP-SCRIPT: Getting box Serial Number" );
     expr jcs:syslog( $SYSLOG, $APPNAME _ ": Getting box Serial Number" );
     /* get our serial number */
    var $chassis_hardware := jcs:execute( $jnx, 'get-chassis-inventory' );
    var $serial_no = $chassis_hardware/chassis/serial-number;
    expr jcs:progress( "ZTP-SCRIPT: serial no = " _ $serial_no );
    expr jcs:syslog( $SYSLOG, $APPNAME _ ": serial no = " _ $serial_no );
	result $serial_no;
}
